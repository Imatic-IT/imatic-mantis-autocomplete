!function(e){var t={};function n(o){if(t[o])return t[o].exports;var r=t[o]={i:o,l:!1,exports:{}};return e[o].call(r.exports,r,r.exports,n),r.l=!0,r.exports}n.m=e,n.c=t,n.d=function(e,t,o){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:o})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var o=Object.create(null);if(n.r(o),Object.defineProperty(o,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var r in e)n.d(o,r,function(t){return e[t]}.bind(null,r));return o},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=0)}([function(e,t,n){"use strict";function o(e,t){return e[t]}n.r(t);let r={};const i=function(){const e=document.querySelector("[data-imatic-autocomplete-url]");if(null===e)return null;return e.dataset.imaticAutocompleteUrl}();let c;function l(){const e=document.querySelector("#imaticAutocompleteWidget");e&&(c(),e.remove())}function u(){const e=document.querySelector("#imaticAutocompleteWidget");e&&e.focus()}function s(e){let t=!1,n=0,s=null;function d(){t&&(t=!1,l())}function a(){return e.selectionStart-n}function f(){const t=a(),o=e.value.substr(n,t);return 0===o.length||null!=o.match(/[\n ]/)?null:o}const p=()=>{if(0!==e.selectionStart){if("@"===e.value[e.selectionStart-1])return t=!0,n=e.selectionStart,void(s=null);if(t){const u=f();if(null==u)return void d();const p=()=>{const i=function(e,t){for(let n=t.length;n>0;n--){const r=o(e,t.substr(0,n));if(null!=r)return r}}(r,f());if(null==i||0===i.length||!t)return l(),void(s=null);if(function(e,t){if(null==e||null==t)return null==e&&null==t;if(e.length!==t.length)return!1;for(let n=0;n<e.length;n++)if(e[n]!==t[n])return!1;return!0}(s,i))return;const u=a();s=i,function({completions:e,onSelect:t,focusInput:n,onRestyle:o,input:r}){l();let i=0;const u=e.map(e=>{const t=document.createTextNode(e),n=document.createElement("li");return n.setAttribute("tabindex",-1),n.appendChild(t),n}),s=document.createElement("ul");s.className="imatic-autocomplete",s.setAttribute("id","imaticAutocompleteWidget"),s.setAttribute("tabindex",-1),u.forEach(e=>s.appendChild(e));const d=new Set(["ArrowDown","ArrowUp","Enter"]);s.addEventListener("keydown",o=>{if(d.has(o.code))switch(o.preventDefault(),o.code){case"ArrowUp":{const e=s.querySelector(`li:nth-child(${i})`);e?(i--,e.focus()):n();break}case"ArrowDown":{const e=s.querySelector(`li:nth-child(${i+2})`);e&&(i++,e.focus())}break;case"Enter":t&&t({val:e[i]}),l()}}),s.addEventListener("click",e=>{var n=$(e.target).text();t({val:n}),l()}),s.addEventListener("focus",e=>{const t=s.querySelector("li");i=0,t&&t.focus()});const a=()=>o(s),f=e=>{e.target===r||e.target===s||s.contains(e.target)||l()},p=r.closest(".table-responsive");var m=document.getElementById("bugnote_text");m.addEventListener("input",a),m.addEventListener("click",a),m.addEventListener("resize",a),window.addEventListener("scroll",a),window.addEventListener("resize",a),r.addEventListener("scroll",a),p&&p.addEventListener("scroll",a),window.addEventListener("click",f),window.addEventListener("focusin",f),c=()=>{m.removeEventListener("input",a),m.removeEventListener("click",a),m.removeEventListener("resize",a),window.removeEventListener("scroll",a),window.removeEventListener("resize",a),r.removeEventListener("scroll",a),p&&p.removeEventListener("scroll",a),window.removeEventListener("click",f),window.removeEventListener("focusin",f)},document.body.appendChild(s),a()}({completions:i,input:e,focusInput:()=>{const t=n+u;e.focus(),e.setSelectionRange(t,t)},onSelect:({val:o})=>{if(!t)return;const r=n+u;e.focus(),e.setRangeText(o.substr(u),r,r,"end")},onRestyle:t=>{const n=e.getBoundingClientRect(),o=getComputedStyle(e);let r=document.getElementById("imaticAutocompleteWidget");const i=function(e,t){const n=document.createElement("span");n.textContent=t;const o=document.createElement("div");o.appendChild(n),Array.from(e).forEach((function(t){o.style.setProperty(t,e.getPropertyValue(t),e.getPropertyPriority(t))})),o.style.visibility="hidden",document.body.appendChild(o);const r={width:n.offsetWidth,height:n.offsetHeight};return o.remove(),r}(o,e.value.substr(0,e.selectionStart)).height;if(t.style.position="fixed",t.style.left=Math.max(0,n.x)+"px",t.style.top=n.y+i+5-e.scrollTop+"px",t.style.width=e.clientWidth+"px",r&&i){const o=r.getBoundingClientRect(),c=n.y-o.y+i;c>-5&&(t.style.top=n.y+i+10-e.scrollTop+c+"px")}}})};if(null!=o(r,u))return p(o(r,u));fetch(function(e){const t=new URL(i,location.href);return t.searchParams.append("search",e),t}(u)).then(e=>e.json()).then(e=>{r=function(e,t,n){return Object.assign({},e,{[t]:n})}(r,u,e),p()})}}else d()};e.addEventListener("keydown",e=>{if(t){switch(e.code){case"ArrowDown":e.preventDefault(),u();break;case"ArrowUp":d();break;case"ArrowLeft":case"ArrowRight":setTimeout(()=>p(),0)}"ArrowDown"===e.code&&u()}}),e.addEventListener("input",e=>{p()})}null!=i&&document.querySelectorAll("#bugnote_text, #description, #steps_to_reproduce, #additional_info, #summary, #additional_information").forEach(e=>{s(e)})}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vanMvY2FjaGUuanMiLCJ3ZWJwYWNrOi8vLy4vanMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vanMvdXRpbHMuanMiXSwibmFtZXMiOlsiaW5zdGFsbGVkTW9kdWxlcyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJtb2R1bGVJZCIsImV4cG9ydHMiLCJtb2R1bGUiLCJpIiwibCIsIm1vZHVsZXMiLCJjYWxsIiwibSIsImMiLCJkIiwibmFtZSIsImdldHRlciIsIm8iLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJnZXQiLCJyIiwiU3ltYm9sIiwidG9TdHJpbmdUYWciLCJ2YWx1ZSIsInQiLCJtb2RlIiwiX19lc01vZHVsZSIsIm5zIiwiY3JlYXRlIiwia2V5IiwiYmluZCIsIm4iLCJvYmplY3QiLCJwcm9wZXJ0eSIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwicCIsInMiLCJjYWNoZSIsInRlcm0iLCJyZXN1bHRDYWNoZSIsIl9hdXRvY29tcGxldGVVcmwiLCJlbCIsImRvY3VtZW50IiwicXVlcnlTZWxlY3RvciIsImRhdGFzZXQiLCJpbWF0aWNBdXRvY29tcGxldGVVcmwiLCJhdXRvY29tcGxldGVVcmwiLCJkZXN0cm95TGlzdEZuIiwiY2xvc2VBdXRvY29tcGxldGVMaXN0RWwiLCJyZW1vdmUiLCJmb2N1c0F1dG9jb21wbGV0ZUxpc3QiLCJmb2N1cyIsImF1dG9jb21wbGV0ZSIsImF1dG9jb21wbGV0aW5nIiwic3RhcnRTZWwiLCJhY3RpdmVDb21wbGV0aW9ucyIsInN0b3BBdXRvY29tcGxldGUiLCJnZXRTZWxlY3Rpb25MZW5ndGgiLCJzZWxlY3Rpb25TdGFydCIsImdldFNlbGVjdGlvbiIsImxlbiIsInNlbGVjdGlvbiIsInN1YnN0ciIsImxlbmd0aCIsIm1hdGNoIiwiaGFuZGxlQ2hhbmdlIiwidiIsInJlY2VpdmVDb21wbGV0aW9ucyIsImNvbXBsZXRpb25zIiwicmVzIiwidjEiLCJ2MiIsImZsYXRBcnJheXNFcXVhbCIsIm9uU2VsZWN0IiwiZm9jdXNJbnB1dCIsIm9uUmVzdHlsZSIsImlucHV0IiwiZm9jdXNlZCIsImNvbXBsZXRpb25FbHMiLCJtYXAiLCJ0ZXh0IiwiY3JlYXRlVGV4dE5vZGUiLCJsaSIsImNyZWF0ZUVsZW1lbnQiLCJzZXRBdHRyaWJ1dGUiLCJhcHBlbmRDaGlsZCIsInVsIiwiY2xhc3NOYW1lIiwiZm9yRWFjaCIsImNvbnRyb2xLZXlzIiwiU2V0IiwiYWRkRXZlbnRMaXN0ZW5lciIsImUiLCJoYXMiLCJjb2RlIiwicHJldmVudERlZmF1bHQiLCJuZXdBY3RpdmUiLCJ2YWwiLCIkIiwidGFyZ2V0IiwiZmlyc3RMaSIsInJlc3R5bGUiLCJjbG9zZUlmT3V0c2lkZVRhcmdldCIsImNvbnRhaW5zIiwic2NDb250YWluZXIiLCJjbG9zZXN0IiwidGV4dEFyZWEiLCJnZXRFbGVtZW50QnlJZCIsIndpbmRvdyIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJib2R5Iiwib3BlbkF1dG9jb21wbGV0ZUxpc3RFbCIsInJlcXVpcmVkU2VsIiwic2V0U2VsZWN0aW9uUmFuZ2UiLCJzZXRSYW5nZVRleHQiLCJsaXN0RWwiLCJsaXN0UG9zIiwiZ2V0Qm91bmRpbmdDbGllbnRSZWN0IiwiZWxTdHlsZXMiLCJnZXRDb21wdXRlZFN0eWxlIiwid2lkZ2V0SWQiLCJ0ZXh0SGVpZ2h0IiwiY29tcHV0ZWRTdHlsZSIsInNwYW4iLCJ0ZXh0Q29udGVudCIsImRpdiIsIkFycmF5IiwiZnJvbSIsInN0eWxlIiwic2V0UHJvcGVydHkiLCJnZXRQcm9wZXJ0eVZhbHVlIiwiZ2V0UHJvcGVydHlQcmlvcml0eSIsInZpc2liaWxpdHkiLCJkYXRhIiwid2lkdGgiLCJvZmZzZXRXaWR0aCIsImhlaWdodCIsIm9mZnNldEhlaWdodCIsInBvc2l0aW9uIiwibGVmdCIsIk1hdGgiLCJtYXgiLCJ4IiwidG9wIiwieSIsInNjcm9sbFRvcCIsImNsaWVudFdpZHRoIiwid2lkZ2V0UG9zaXRpb24iLCJwb3NEaWYiLCJmZXRjaCIsInVybCIsIlVSTCIsImxvY2F0aW9uIiwiaHJlZiIsInNlYXJjaFBhcmFtcyIsImFwcGVuZCIsInNlYXJjaFVybCIsInRoZW4iLCJqc29uIiwiYXNzaWduIiwic2V0VGltZW91dCIsInF1ZXJ5U2VsZWN0b3JBbGwiXSwibWFwcGluZ3MiOiJhQUNFLElBQUlBLEVBQW1CLEdBR3ZCLFNBQVNDLEVBQW9CQyxHQUc1QixHQUFHRixFQUFpQkUsR0FDbkIsT0FBT0YsRUFBaUJFLEdBQVVDLFFBR25DLElBQUlDLEVBQVNKLEVBQWlCRSxHQUFZLENBQ3pDRyxFQUFHSCxFQUNISSxHQUFHLEVBQ0hILFFBQVMsSUFVVixPQU5BSSxFQUFRTCxHQUFVTSxLQUFLSixFQUFPRCxRQUFTQyxFQUFRQSxFQUFPRCxRQUFTRixHQUcvREcsRUFBT0UsR0FBSSxFQUdKRixFQUFPRCxRQUtmRixFQUFvQlEsRUFBSUYsRUFHeEJOLEVBQW9CUyxFQUFJVixFQUd4QkMsRUFBb0JVLEVBQUksU0FBU1IsRUFBU1MsRUFBTUMsR0FDM0NaLEVBQW9CYSxFQUFFWCxFQUFTUyxJQUNsQ0csT0FBT0MsZUFBZWIsRUFBU1MsRUFBTSxDQUFFSyxZQUFZLEVBQU1DLElBQUtMLEtBS2hFWixFQUFvQmtCLEVBQUksU0FBU2hCLEdBQ1gsb0JBQVhpQixRQUEwQkEsT0FBT0MsYUFDMUNOLE9BQU9DLGVBQWViLEVBQVNpQixPQUFPQyxZQUFhLENBQUVDLE1BQU8sV0FFN0RQLE9BQU9DLGVBQWViLEVBQVMsYUFBYyxDQUFFbUIsT0FBTyxLQVF2RHJCLEVBQW9Cc0IsRUFBSSxTQUFTRCxFQUFPRSxHQUV2QyxHQURVLEVBQVBBLElBQVVGLEVBQVFyQixFQUFvQnFCLElBQy9CLEVBQVBFLEVBQVUsT0FBT0YsRUFDcEIsR0FBVyxFQUFQRSxHQUE4QixpQkFBVkYsR0FBc0JBLEdBQVNBLEVBQU1HLFdBQVksT0FBT0gsRUFDaEYsSUFBSUksRUFBS1gsT0FBT1ksT0FBTyxNQUd2QixHQUZBMUIsRUFB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QixHQUFVLElBQ1ZqQyxFQUFPYSxNQUFNZSxJQUFNM0IsRUFBUTRCLEVBQUl2QixFQUFhLEdBQUtoRixFQUFHd0csVUFBWUcsRUFBUyxXQVFqRyxHRDNSbUIsTUFBcEJsSSxFQzJSZXFCLEVBQWEyQixHQUN2QixPQUFPQyxFQUFtQixFQUFVNUIsRUFBYTJCLElBR3JEbUYsTUE4Q1osU0FBbUJqSCxHQUNmLE1BQU1rSCxFQUFNLElBQUlDLElBQUkvRyxFQUFrQmdILFNBQVNDLE1BRy9DLE9BRkFILEVBQUlJLGFBQWFDLE9BQU8sU0FBVXZILEdBRTNCa0gsRUFsRE9NLENBQVUxRixJQUNYMkYsS0FBTXhGLEdBQVFBLEVBQUl5RixRQUNsQkQsS0FBTXpGLElBQ0g3QixFRDNTYixTQUFhRixFQUFPQyxFQUFNaEIsR0FDN0IsT0FBT1AsT0FBT2dKLE9BQU8sR0FBSTFILEVBQU8sQ0FBQyxDQUFDQyxHQUFPaEIsSUMwU1gsQ0FBVWlCLEVBQWEyQixFQUFHRSxHQUN4Q0QsWUFuR1JYLEtBd0dSZixFQUFHa0QsaUJBQWlCLFVBQVlDLElBQzVCLEdBQUt2QyxFQUFMLENBSUEsT0FBUXVDLEVBQUVFLE1BQ04sSUFBSyxZQUNERixFQUFFRyxpQkFDRjdDLElBQ0EsTUFDSixJQUFLLFVBQ0RNLElBQ0EsTUFDSixJQUFLLFlBQ0wsSUFBSyxhQUVEd0csV0FBVyxJQUFNL0YsSUFBZ0IsR0FHMUIsY0FBWDJCLEVBQUVFLE1BQ0Y1QyxPQUdSVCxFQUFHa0QsaUJBQWlCLFFBQVVDLElBQzFCM0IsTUFvQmdCLE1BQXBCekIsR0FDQUUsU0FDS3VILGlCQUNHLHlHQUVIekUsUUFBUy9DLElBQ05XLEVBQWFYIiwiZmlsZSI6ImF1dG9jb21wbGV0ZS5qcyIsInNvdXJjZXNDb250ZW50IjpbIiBcdC8vIFRoZSBtb2R1bGUgY2FjaGVcbiBcdHZhciBpbnN0YWxsZWRNb2R1bGVzID0ge307XG5cbiBcdC8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG4gXHRmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cbiBcdFx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG4gXHRcdGlmKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdKSB7XG4gXHRcdFx0cmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7XG4gXHRcdH1cbiBcdFx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcbiBcdFx0dmFyIG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdID0ge1xuIFx0XHRcdGk6IG1vZHVsZUlkLFxuIFx0XHRcdGw6IGZhbHNlLFxuIFx0XHRcdGV4cG9ydHM6IHt9XG4gXHRcdH07XG5cbiBcdFx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG4gXHRcdG1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG4gXHRcdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcbiBcdFx0bW9kdWxlLmwgPSB0cnVlO1xuXG4gXHRcdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG4gXHRcdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbiBcdH1cblxuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tID0gbW9kdWxlcztcblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGVcbiBcdF9fd2VicGFja19yZXF1aXJlX18uYyA9IGluc3RhbGxlZE1vZHVsZXM7XG5cbiBcdC8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb24gZm9yIGhhcm1vbnkgZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kID0gZnVuY3Rpb24oZXhwb3J0cywgbmFtZSwgZ2V0dGVyKSB7XG4gXHRcdGlmKCFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywgbmFtZSkpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgbmFtZSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGdldHRlciB9KTtcbiBcdFx0fVxuIFx0fTtcblxuIFx0Ly8gZGVmaW5lIF9fZXNNb2R1bGUgb24gZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yID0gZnVuY3Rpb24oZXhwb3J0cykge1xuIFx0XHRpZih0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wudG9TdHJpbmdUYWcpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcbiBcdFx0fVxuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuIFx0fTtcblxuIFx0Ly8gY3JlYXRlIGEgZmFrZSBuYW1lc3BhY2Ugb2JqZWN0XG4gXHQvLyBtb2RlICYgMTogdmFsdWUgaXMgYSBtb2R1bGUgaWQsIHJlcXVpcmUgaXRcbiBcdC8vIG1vZGUgJiAyOiBtZXJnZSBhbGwgcHJvcGVydGllcyBvZiB2YWx1ZSBpbnRvIHRoZSBuc1xuIFx0Ly8gbW9kZSAmIDQ6IHJldHVybiB2YWx1ZSB3aGVuIGFscmVhZHkgbnMgb2JqZWN0XG4gXHQvLyBtb2RlICYgOHwxOiBiZWhhdmUgbGlrZSByZXF1aXJlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnQgPSBmdW5jdGlvbih2YWx1ZSwgbW9kZSkge1xuIFx0XHRpZihtb2RlICYgMSkgdmFsdWUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKHZhbHVlKTtcbiBcdFx0aWYobW9kZSAmIDgpIHJldHVybiB2YWx1ZTtcbiBcdFx0aWYoKG1vZGUgJiA0KSAmJiB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnICYmIHZhbHVlICYmIHZhbHVlLl9fZXNNb2R1bGUpIHJldHVybiB2YWx1ZTtcbiBcdFx0dmFyIG5zID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yKG5zKTtcbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG5zLCAnZGVmYXVsdCcsIHsgZW51bWVyYWJsZTogdHJ1ZSwgdmFsdWU6IHZhbHVlIH0pO1xuIFx0XHRpZihtb2RlICYgMiAmJiB0eXBlb2YgdmFsdWUgIT0gJ3N0cmluZycpIGZvcih2YXIga2V5IGluIHZhbHVlKSBfX3dlYnBhY2tfcmVxdWlyZV9fLmQobnMsIGtleSwgZnVuY3Rpb24oa2V5KSB7IHJldHVybiB2YWx1ZVtrZXldOyB9LmJpbmQobnVsbCwga2V5KSk7XG4gXHRcdHJldHVybiBucztcbiBcdH07XG5cbiBcdC8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSBmdW5jdGlvbihtb2R1bGUpIHtcbiBcdFx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0RGVmYXVsdCgpIHsgcmV0dXJuIG1vZHVsZVsnZGVmYXVsdCddOyB9IDpcbiBcdFx0XHRmdW5jdGlvbiBnZXRNb2R1bGVFeHBvcnRzKCkgeyByZXR1cm4gbW9kdWxlOyB9O1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCAnYScsIGdldHRlcik7XG4gXHRcdHJldHVybiBnZXR0ZXI7XG4gXHR9O1xuXG4gXHQvLyBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGxcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubyA9IGZ1bmN0aW9uKG9iamVjdCwgcHJvcGVydHkpIHsgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIHByb3BlcnR5KTsgfTtcblxuIFx0Ly8gX193ZWJwYWNrX3B1YmxpY19wYXRoX19cbiBcdF9fd2VicGFja19yZXF1aXJlX18ucCA9IFwiXCI7XG5cblxuIFx0Ly8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4gXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXyhfX3dlYnBhY2tfcmVxdWlyZV9fLnMgPSAwKTtcbiIsImV4cG9ydCBmdW5jdGlvbiBjcmVhdGUoKSB7XG4gICAgcmV0dXJuIHt9O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gc2V0KGNhY2hlLCB0ZXJtLCB2YWx1ZSkge1xuICAgIHJldHVybiBPYmplY3QuYXNzaWduKHt9LCBjYWNoZSwge1t0ZXJtXTogdmFsdWV9KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldChjYWNoZSwgdGVybSkge1xuICAgIHJldHVybiBjYWNoZVt0ZXJtXTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGhhcyhjYWNoZSwgdGVybSkge1xuICAgIHJldHVybiBnZXQoY2FjaGUsIHRlcm0pICE9IG51bGw7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRCZXN0TWF0Y2goY2FjaGUsIHRlcm0pIHtcbiAgICBmb3IgKGxldCBpID0gdGVybS5sZW5ndGg7IGkgPiAwOyBpLS0pIHtcbiAgICAgICAgY29uc3QgcmVzID0gZ2V0KGNhY2hlLCB0ZXJtLnN1YnN0cigwLCBpKSk7XG4gICAgICAgIGlmIChyZXMgIT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuIHJlcztcbiAgICAgICAgfVxuICAgIH1cbn1cbiIsImltcG9ydCAqIGFzIHUgZnJvbSAnLi91dGlscyc7XG5pbXBvcnQgKiBhcyBjYWNoZSBmcm9tICcuL2NhY2hlJztcblxubGV0IHJlc3VsdENhY2hlID0gY2FjaGUuY3JlYXRlKCk7XG5jb25zdCBfYXV0b2NvbXBsZXRlVXJsID0gYXV0b2NvbXBsZXRlVXJsKCk7XG5jb25zdCBtYXhfbGVuID0gMTkxO1xubGV0IGRlc3Ryb3lMaXN0Rm47XG5cbmZ1bmN0aW9uIGZsYXRBcnJheXNFcXVhbCh2MSwgdjIpIHtcbiAgICBpZiAodjEgPT0gbnVsbCB8fCB2MiA9PSBudWxsKSB7XG4gICAgICAgIHJldHVybiB2MSA9PSBudWxsICYmIHYyID09IG51bGw7XG4gICAgfVxuXG4gICAgaWYgKHYxLmxlbmd0aCAhPT0gdjIubGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHYxLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGlmICh2MVtpXSAhPT0gdjJbaV0pIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB0cnVlO1xufVxuXG5mdW5jdGlvbiBvcGVuQXV0b2NvbXBsZXRlTGlzdEVsKHtcbiAgICBjb21wbGV0aW9ucyxcbiAgICBvblNlbGVjdCxcbiAgICBmb2N1c0lucHV0LFxuICAgIG9uUmVzdHlsZSxcbiAgICBpbnB1dCxcbn0pIHtcbiAgICBjbG9zZUF1dG9jb21wbGV0ZUxpc3RFbCgpO1xuXG4gICAgbGV0IGZvY3VzZWQgPSAwO1xuXG4gICAgY29uc3QgY29tcGxldGlvbkVscyA9IGNvbXBsZXRpb25zLm1hcCgodikgPT4ge1xuICAgICAgICBjb25zdCB0ZXh0ID0gZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUodik7XG5cbiAgICAgICAgY29uc3QgbGkgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdsaScpO1xuICAgICAgICBsaS5zZXRBdHRyaWJ1dGUoJ3RhYmluZGV4JywgLTEpO1xuICAgICAgICBsaS5hcHBlbmRDaGlsZCh0ZXh0KTtcblxuICAgICAgICByZXR1cm4gbGk7XG4gICAgfSk7XG5cbiAgICBjb25zdCB1bCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3VsJyk7XG4gICAgdWwuY2xhc3NOYW1lID0gJ2ltYXRpYy1hdXRvY29tcGxldGUnO1xuICAgIHVsLnNldEF0dHJpYnV0ZSgnaWQnLCAnaW1hdGljQXV0b2NvbXBsZXRlV2lkZ2V0Jyk7XG4gICAgdWwuc2V0QXR0cmlidXRlKCd0YWJpbmRleCcsIC0xKTtcbiAgICBjb21wbGV0aW9uRWxzLmZvckVhY2goKGVsKSA9PiB1bC5hcHBlbmRDaGlsZChlbCkpO1xuXG4gICAgY29uc3QgY29udHJvbEtleXMgPSBuZXcgU2V0KFsnQXJyb3dEb3duJywgJ0Fycm93VXAnLCAnRW50ZXInXSk7XG5cbiAgICB1bC5hZGRFdmVudExpc3RlbmVyKCdrZXlkb3duJywgKGUpID0+IHtcbiAgICAgICAgaWYgKCFjb250cm9sS2V5cy5oYXMoZS5jb2RlKSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpOyAvLyBwcmV2ZW50IHNjcm9sbGluZ1xuXG4gICAgICAgIHN3aXRjaCAoZS5jb2RlKSB7XG4gICAgICAgICAgICBjYXNlICdBcnJvd1VwJzoge1xuICAgICAgICAgICAgICAgIGNvbnN0IG5ld0FjdGl2ZSA9IHVsLnF1ZXJ5U2VsZWN0b3IoYGxpOm50aC1jaGlsZCgke2ZvY3VzZWR9KWApO1xuICAgICAgICAgICAgICAgIGlmIChuZXdBY3RpdmUpIHtcbiAgICAgICAgICAgICAgICAgICAgZm9jdXNlZC0tO1xuICAgICAgICAgICAgICAgICAgICBuZXdBY3RpdmUuZm9jdXMoKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBmb2N1c0lucHV0KCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2FzZSAnQXJyb3dEb3duJzpcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IG5ld0FjdGl2ZSA9IHVsLnF1ZXJ5U2VsZWN0b3IoXG4gICAgICAgICAgICAgICAgICAgICAgICBgbGk6bnRoLWNoaWxkKCR7Zm9jdXNlZCArIDJ9KWBcbiAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKG5ld0FjdGl2ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZm9jdXNlZCsrO1xuICAgICAgICAgICAgICAgICAgICAgICAgbmV3QWN0aXZlLmZvY3VzKCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdFbnRlcic6XG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBpZiAob25TZWxlY3QpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG9uU2VsZWN0KHt2YWw6IGNvbXBsZXRpb25zW2ZvY3VzZWRdfSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgY2xvc2VBdXRvY29tcGxldGVMaXN0RWwoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgIHVsLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKGUpID0+IHtcbiAgICAgICAgdmFyIHRleHQgPSAkKGUudGFyZ2V0KS50ZXh0KCk7XG4gICAgICAgIG9uU2VsZWN0KHt2YWw6IHRleHR9KTtcbiAgICAgICAgY2xvc2VBdXRvY29tcGxldGVMaXN0RWwoKTtcbiAgICB9KVxuXG4gICAgdWwuYWRkRXZlbnRMaXN0ZW5lcignZm9jdXMnLCAoZSkgPT4ge1xuICAgICAgICBjb25zdCBmaXJzdExpID0gdWwucXVlcnlTZWxlY3RvcignbGknKTtcbiAgICAgICAgZm9jdXNlZCA9IDA7XG4gICAgICAgIGlmIChmaXJzdExpKSB7XG4gICAgICAgICAgICBmaXJzdExpLmZvY3VzKCk7XG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgIGNvbnN0IHJlc3R5bGUgPSAoKSA9PiBvblJlc3R5bGUodWwpO1xuXG4gICAgY29uc3QgY2xvc2VJZk91dHNpZGVUYXJnZXQgPSAoZSkgPT4ge1xuICAgICAgICBpZiAoZS50YXJnZXQgPT09IGlucHV0IHx8IGUudGFyZ2V0ID09PSB1bCB8fCB1bC5jb250YWlucyhlLnRhcmdldCkpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGNsb3NlQXV0b2NvbXBsZXRlTGlzdEVsKCk7XG4gICAgfTtcblxuICAgIGNvbnN0IHNjQ29udGFpbmVyID0gaW5wdXQuY2xvc2VzdCgnLnRhYmxlLXJlc3BvbnNpdmUnKTtcblxuICAgIHZhciB0ZXh0QXJlYSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdidWdub3RlX3RleHQnKVxuXG4gICAgdGV4dEFyZWEuYWRkRXZlbnRMaXN0ZW5lcignaW5wdXQnLCByZXN0eWxlKTtcbiAgICB0ZXh0QXJlYS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIHJlc3R5bGUpO1xuICAgIHRleHRBcmVhLmFkZEV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIHJlc3R5bGUpO1xuICAgIFxuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdzY3JvbGwnLCByZXN0eWxlKTtcbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigncmVzaXplJywgcmVzdHlsZSk7XG4gICAgaW5wdXQuYWRkRXZlbnRMaXN0ZW5lcignc2Nyb2xsJywgcmVzdHlsZSk7XG4gICAgaWYgKHNjQ29udGFpbmVyKSB7XG4gICAgICAgIHNjQ29udGFpbmVyLmFkZEV2ZW50TGlzdGVuZXIoJ3Njcm9sbCcsIHJlc3R5bGUpO1xuICAgIH1cbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBjbG9zZUlmT3V0c2lkZVRhcmdldCk7XG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ2ZvY3VzaW4nLCBjbG9zZUlmT3V0c2lkZVRhcmdldCk7XG5cbiAgICBkZXN0cm95TGlzdEZuID0gKCkgPT4ge1xuICAgICAgICBcbiAgICAgICAgdGV4dEFyZWEucmVtb3ZlRXZlbnRMaXN0ZW5lcignaW5wdXQnLCByZXN0eWxlKTtcbiAgICAgICAgdGV4dEFyZWEucmVtb3ZlRXZlbnRMaXN0ZW5lcignY2xpY2snLCByZXN0eWxlKTtcbiAgICAgICAgdGV4dEFyZWEucmVtb3ZlRXZlbnRMaXN0ZW5lcigncmVzaXplJywgcmVzdHlsZSk7XG5cbiAgICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3Njcm9sbCcsIHJlc3R5bGUpO1xuICAgICAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcigncmVzaXplJywgcmVzdHlsZSk7XG4gICAgICAgIGlucHV0LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3Njcm9sbCcsIHJlc3R5bGUpO1xuICAgICAgICBpZiAoc2NDb250YWluZXIpIHtcbiAgICAgICAgICAgIHNjQ29udGFpbmVyLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3Njcm9sbCcsIHJlc3R5bGUpO1xuICAgICAgICB9XG4gICAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCdjbGljaycsIGNsb3NlSWZPdXRzaWRlVGFyZ2V0KTtcbiAgICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2ZvY3VzaW4nLCBjbG9zZUlmT3V0c2lkZVRhcmdldCk7XG4gICAgfTtcblxuICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQodWwpO1xuXG4gICAgcmVzdHlsZSgpO1xufVxuXG5mdW5jdGlvbiBjbG9zZUF1dG9jb21wbGV0ZUxpc3RFbCgpIHtcbiAgICBjb25zdCBlbCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNpbWF0aWNBdXRvY29tcGxldGVXaWRnZXQnKTtcbiAgICBpZiAoZWwpIHtcbiAgICAgICAgZGVzdHJveUxpc3RGbigpO1xuICAgICAgICBlbC5yZW1vdmUoKTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIGZvY3VzQXV0b2NvbXBsZXRlTGlzdCgpIHtcbiAgICBjb25zdCBlbCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNpbWF0aWNBdXRvY29tcGxldGVXaWRnZXQnKTtcbiAgICBpZiAoIWVsKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBlbC5mb2N1cygpO1xufVxuXG5mdW5jdGlvbiBhdXRvY29tcGxldGUoZWwpIHtcbiAgICBsZXQgYXV0b2NvbXBsZXRpbmcgPSBmYWxzZTtcbiAgICBsZXQgc3RhcnRTZWwgPSAwO1xuICAgIGxldCBhY3RpdmVDb21wbGV0aW9ucyA9IG51bGw7XG5cbiAgICBmdW5jdGlvbiBzdG9wQXV0b2NvbXBsZXRlKCkge1xuICAgICAgICBpZiAoIWF1dG9jb21wbGV0aW5nKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBhdXRvY29tcGxldGluZyA9IGZhbHNlO1xuICAgICAgICBjbG9zZUF1dG9jb21wbGV0ZUxpc3RFbCgpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdldFNlbGVjdGlvbkxlbmd0aCgpIHtcbiAgICAgICAgcmV0dXJuIGVsLnNlbGVjdGlvblN0YXJ0IC0gc3RhcnRTZWw7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2V0U2VsZWN0aW9uKCkge1xuICAgICAgICBjb25zdCBsZW4gPSBnZXRTZWxlY3Rpb25MZW5ndGgoKTtcbiAgICAgICAgY29uc3Qgc2VsZWN0aW9uID0gZWwudmFsdWUuc3Vic3RyKHN0YXJ0U2VsLCBsZW4pO1xuXG4gICAgICAgIGlmIChzZWxlY3Rpb24ubGVuZ3RoID09PSAwIHx8IHNlbGVjdGlvbi5tYXRjaCgvW1xcbiBdLykgIT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gc2VsZWN0aW9uO1xuICAgIH1cblxuICAgIGNvbnN0IGhhbmRsZUNoYW5nZSA9ICgpID0+IHtcbiAgICAgICAgaWYgKGVsLnNlbGVjdGlvblN0YXJ0ID09PSAwKSB7XG4gICAgICAgICAgICBzdG9wQXV0b2NvbXBsZXRlKCk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoZWwudmFsdWVbZWwuc2VsZWN0aW9uU3RhcnQgLSAxXSA9PT0gJ0AnKSB7XG4gICAgICAgICAgICBhdXRvY29tcGxldGluZyA9IHRydWU7XG4gICAgICAgICAgICBzdGFydFNlbCA9IGVsLnNlbGVjdGlvblN0YXJ0O1xuICAgICAgICAgICAgYWN0aXZlQ29tcGxldGlvbnMgPSBudWxsO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGF1dG9jb21wbGV0aW5nKSB7XG4gICAgICAgICAgICBjb25zdCB2ID0gZ2V0U2VsZWN0aW9uKCk7XG4gICAgICAgICAgICBpZiAodiA9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgc3RvcEF1dG9jb21wbGV0ZSgpO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgY29uc3QgcmVjZWl2ZUNvbXBsZXRpb25zID0gKCkgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IGNvbXBsZXRpb25zID0gY2FjaGUuZ2V0QmVzdE1hdGNoKFxuICAgICAgICAgICAgICAgICAgICByZXN1bHRDYWNoZSxcbiAgICAgICAgICAgICAgICAgICAgZ2V0U2VsZWN0aW9uKClcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgICAgICAgY29tcGxldGlvbnMgPT0gbnVsbCB8fFxuICAgICAgICAgICAgICAgICAgICBjb21wbGV0aW9ucy5sZW5ndGggPT09IDAgfHxcbiAgICAgICAgICAgICAgICAgICAgIWF1dG9jb21wbGV0aW5nXG4gICAgICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgICAgIGNsb3NlQXV0b2NvbXBsZXRlTGlzdEVsKCk7XG4gICAgICAgICAgICAgICAgICAgIGFjdGl2ZUNvbXBsZXRpb25zID0gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmIChmbGF0QXJyYXlzRXF1YWwoYWN0aXZlQ29tcGxldGlvbnMsIGNvbXBsZXRpb25zKSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgY29uc3QgbGVuID0gZ2V0U2VsZWN0aW9uTGVuZ3RoKCk7XG4gICAgICAgICAgICAgICAgYWN0aXZlQ29tcGxldGlvbnMgPSBjb21wbGV0aW9ucztcblxuICAgICAgICAgICAgICAgIG9wZW5BdXRvY29tcGxldGVMaXN0RWwoe1xuICAgICAgICAgICAgICAgICAgICBjb21wbGV0aW9uczogY29tcGxldGlvbnMsXG4gICAgICAgICAgICAgICAgICAgIGlucHV0OiBlbCxcbiAgICAgICAgICAgICAgICAgICAgZm9jdXNJbnB1dDogKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgcmVxdWlyZWRTZWwgPSBzdGFydFNlbCArIGxlbjtcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsLmZvY3VzKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBlbC5zZXRTZWxlY3Rpb25SYW5nZShyZXF1aXJlZFNlbCwgcmVxdWlyZWRTZWwpO1xuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBvblNlbGVjdDogKHt2YWx9KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWF1dG9jb21wbGV0aW5nKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCByZXF1aXJlZFNlbCA9IHN0YXJ0U2VsICsgbGVuO1xuICAgICAgICAgICAgICAgICAgICAgICAgZWwuZm9jdXMoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsLnNldFJhbmdlVGV4dChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWwuc3Vic3RyKGxlbiksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVxdWlyZWRTZWwsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVxdWlyZWRTZWwsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2VuZCdcbiAgICAgICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIG9uUmVzdHlsZTogKGxpc3RFbCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgbGlzdFBvcyA9IGVsLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgZWxTdHlsZXMgPSBnZXRDb21wdXRlZFN0eWxlKGVsKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCB3aWRnZXRJZCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdpbWF0aWNBdXRvY29tcGxldGVXaWRnZXQnKVxuXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB0ZXh0SGVpZ2h0ID0gdS50ZXh0U2l6ZShcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbFN0eWxlcyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbC52YWx1ZS5zdWJzdHIoMCwgZWwuc2VsZWN0aW9uU3RhcnQpXG4gICAgICAgICAgICAgICAgICAgICAgICApLmhlaWdodDtcbiAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgbGlzdEVsLnN0eWxlLnBvc2l0aW9uID0gJ2ZpeGVkJztcbiAgICAgICAgICAgICAgICAgICAgICAgIGxpc3RFbC5zdHlsZS5sZWZ0ID0gTWF0aC5tYXgoMCwgbGlzdFBvcy54KSArICdweCc7XG4gICAgICAgICAgICAgICAgICAgICAgICBsaXN0RWwuc3R5bGUudG9wID1cbiAgICAgICAgICAgICAgICAgICAgICAgICBsaXN0UG9zLnkgKyB0ZXh0SGVpZ2h0ICsgNSAtIGVsLnNjcm9sbFRvcCArICdweCc7XG4gICAgICAgICAgICAgICAgICAgICAgICBsaXN0RWwuc3R5bGUud2lkdGggPSBlbC5jbGllbnRXaWR0aCArICdweCc7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh3aWRnZXRJZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0ZXh0SGVpZ2h0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHdpZGdldFBvc2l0aW9uID0gd2lkZ2V0SWQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHBvc0RpZiA9IGxpc3RQb3MueSAtIHdpZGdldFBvc2l0aW9uLnkgKyB0ZXh0SGVpZ2h0XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwb3NEaWYgPiAtNSApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxpc3RFbC5zdHlsZS50b3AgPSBsaXN0UG9zLnkgKyB0ZXh0SGVpZ2h0ICsgMTAgLSBlbC5zY3JvbGxUb3AgKyBwb3NEaWYgKyAncHgnO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgaWYgKGNhY2hlLmhhcyhyZXN1bHRDYWNoZSwgdikpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVjZWl2ZUNvbXBsZXRpb25zKGNhY2hlLmdldChyZXN1bHRDYWNoZSwgdikpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBmZXRjaChzZWFyY2hVcmwodikpXG4gICAgICAgICAgICAgICAgLnRoZW4oKHJlcykgPT4gcmVzLmpzb24oKSlcbiAgICAgICAgICAgICAgICAudGhlbigoY29tcGxldGlvbnMpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0Q2FjaGUgPSBjYWNoZS5zZXQocmVzdWx0Q2FjaGUsIHYsIGNvbXBsZXRpb25zKTtcbiAgICAgICAgICAgICAgICAgICAgcmVjZWl2ZUNvbXBsZXRpb25zKCk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgZWwuYWRkRXZlbnRMaXN0ZW5lcigna2V5ZG93bicsIChlKSA9PiB7XG4gICAgICAgIGlmICghYXV0b2NvbXBsZXRpbmcpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHN3aXRjaCAoZS5jb2RlKSB7XG4gICAgICAgICAgICBjYXNlICdBcnJvd0Rvd24nOlxuICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTsgLy8gcHJldmVudCBzY3JvbGxpbmdcbiAgICAgICAgICAgICAgICBmb2N1c0F1dG9jb21wbGV0ZUxpc3QoKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ0Fycm93VXAnOlxuICAgICAgICAgICAgICAgIHN0b3BBdXRvY29tcGxldGUoKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ0Fycm93TGVmdCc6XG4gICAgICAgICAgICBjYXNlICdBcnJvd1JpZ2h0JzpcbiAgICAgICAgICAgICAgICAvLyBtYWtlIHN1cmUgdGhhdCBlbGVtZW50IGhhcyBjb3JyZWN0IHNlbGVjdGlvblxuICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4gaGFuZGxlQ2hhbmdlKCksIDApO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGlmIChlLmNvZGUgPT09ICdBcnJvd0Rvd24nKSB7XG4gICAgICAgICAgICBmb2N1c0F1dG9jb21wbGV0ZUxpc3QoKTtcbiAgICAgICAgfVxuICAgIH0pO1xuICAgIGVsLmFkZEV2ZW50TGlzdGVuZXIoJ2lucHV0JywgKGUpID0+IHtcbiAgICAgICAgaGFuZGxlQ2hhbmdlKCk7XG4gICAgfSk7XG59XG5cbmZ1bmN0aW9uIGF1dG9jb21wbGV0ZVVybCgpIHtcbiAgICBjb25zdCBlbCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ1tkYXRhLWltYXRpYy1hdXRvY29tcGxldGUtdXJsXScpO1xuICAgIGlmIChlbCA9PT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICByZXR1cm4gZWwuZGF0YXNldC5pbWF0aWNBdXRvY29tcGxldGVVcmw7XG59XG5cbmZ1bmN0aW9uIHNlYXJjaFVybChzKSB7XG4gICAgY29uc3QgdXJsID0gbmV3IFVSTChfYXV0b2NvbXBsZXRlVXJsLCBsb2NhdGlvbi5ocmVmKTtcbiAgICB1cmwuc2VhcmNoUGFyYW1zLmFwcGVuZCgnc2VhcmNoJywgcyk7XG5cbiAgICByZXR1cm4gdXJsO1xufVxuXG5pZiAoX2F1dG9jb21wbGV0ZVVybCAhPSBudWxsKSB7XG4gICAgZG9jdW1lbnRcbiAgICAgICAgLnF1ZXJ5U2VsZWN0b3JBbGwoXG4gICAgICAgICAgICAnI2J1Z25vdGVfdGV4dCwgI2Rlc2NyaXB0aW9uLCAjc3RlcHNfdG9fcmVwcm9kdWNlLCAjYWRkaXRpb25hbF9pbmZvLCAjc3VtbWFyeSwgI2FkZGl0aW9uYWxfaW5mb3JtYXRpb24nXG4gICAgICAgIClcbiAgICAgICAgLmZvckVhY2goKGVsKSA9PiB7XG4gICAgICAgICAgICBhdXRvY29tcGxldGUoZWwpO1xuICAgICAgICB9KTtcbn1cbiIsIi8qKlxuICogQHBhcmFtIHtDU1NTdHlsZURlY2xhcmF0aW9ufSBjb21wdXRlZFN0eWxlXG4gKiBAcGFyYW0ge3N0cmluZ30gdGV4dFxuICpcbiAqIEByZXR1cm5zIHt7d2lkdGg6IG51bWJlciwgaGVpZ2h0OiBudW1iZXJ9fVxuICovXG5leHBvcnQgZnVuY3Rpb24gdGV4dFNpemUoY29tcHV0ZWRTdHlsZSwgdGV4dCkge1xuICAgIGNvbnN0IHNwYW4gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzcGFuJyk7XG4gICAgc3Bhbi50ZXh0Q29udGVudCA9IHRleHQ7XG5cbiAgICBjb25zdCBkaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICBkaXYuYXBwZW5kQ2hpbGQoc3Bhbik7XG4gICAgQXJyYXkuZnJvbShjb21wdXRlZFN0eWxlKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgZGl2LnN0eWxlLnNldFByb3BlcnR5KFxuICAgICAgICAgICAga2V5LFxuICAgICAgICAgICAgY29tcHV0ZWRTdHlsZS5nZXRQcm9wZXJ0eVZhbHVlKGtleSksXG4gICAgICAgICAgICBjb21wdXRlZFN0eWxlLmdldFByb3BlcnR5UHJpb3JpdHkoa2V5KVxuICAgICAgICApO1xuICAgIH0pO1xuICAgIGRpdi5zdHlsZS52aXNpYmlsaXR5ID0gJ2hpZGRlbic7XG4gICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChkaXYpO1xuXG4gICAgY29uc3QgZGF0YSA9IHt3aWR0aDogc3Bhbi5vZmZzZXRXaWR0aCwgaGVpZ2h0OiBzcGFuLm9mZnNldEhlaWdodH07XG5cbiAgICBkaXYucmVtb3ZlKCk7XG5cbiAgICByZXR1cm4gZGF0YTtcbn1cbiJdLCJzb3VyY2VSb290IjoiIn0=