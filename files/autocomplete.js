!function(e){var t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)n.d(r,o,function(t){return e[t]}.bind(null,o));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=0)}([function(e,t,n){"use strict";function r(e,t){return e[t]}n.r(t);let o={};let i;function c(){const e=document.querySelector("#imaticAutocompleteWidget");e&&(i(),e.remove())}function l(){const e=document.querySelector("#imaticAutocompleteWidget");e&&e.focus()}function s(e){let t=!1,n=0,s=null;function u(){t&&(t=!1,c())}function a(){return e.selectionStart-n}function d(){const t=a(),r=e.value.substr(n,t);return 0===r.length||null!=r.match(/[\n ]/)?null:r}const f=()=>{if(0!==e.selectionStart){if("@"===e.value[e.selectionStart-1])return t=!0,n=e.selectionStart,void(s=null);if(t){const l=d();if(null==l)return void u();const f=()=>{const l=function(e,t){for(let n=t.length;n>0;n--){const o=r(e,t.substr(0,n));if(null!=o)return o}}(o,d());if(null==l||0===l.length||!t)return c(),void(s=null);if(function(e,t){if(null==e||null==t)return null==e&&null==t;if(e.length!==t.length)return!1;for(let n=0;n<e.length;n++)if(e[n]!==t[n])return!1;return!0}(s,l))return;const u=a();s=l,function({completions:e,onSelect:t,focusInput:n,onRestyle:r,input:o}){c();let l=0;const s=e.map(e=>{const t=document.createTextNode(e),n=document.createElement("li");return n.setAttribute("tabindex",-1),n.appendChild(t),n}),u=document.createElement("ul");u.className="imatic-autocomplete",u.setAttribute("id","imaticAutocompleteWidget"),u.setAttribute("tabindex",-1),s.forEach(e=>u.appendChild(e));const a=new Set(["ArrowDown","ArrowUp","Enter","Tab"]);u.addEventListener("keydown",r=>{if(a.has(r.code))switch(r.preventDefault(),r.code){case"ArrowUp":{const e=u.querySelector(`li:nth-child(${l})`);e?(l--,e.focus()):n();break}case"ArrowDown":{const e=u.querySelector(`li:nth-child(${l+2})`);e&&(l++,e.focus())}break;case"Enter":if(t){function o(e){return e.replace(/.*\s/,"")}const n=o(e[l]);t({val:n}),c()}break;case"Tab":if(r.preventDefault(),t){function o(e){return e.replace(/.*\s/,"")}const n=o(e[l]);t({val:n}),c()}}}),u.addEventListener("click",e=>{var n=$(e.target).text();n=n.replace(/.*\s/,""),t({val:n}),c()}),u.addEventListener("focus",e=>{const t=u.querySelector("li");l=0,t&&t.focus()});const d=()=>r(u),f=e=>{e.target===o||e.target===u||u.contains(e.target)||c()},p=o.closest(".table-responsive");var m=document.getElementById("bugnote_text");m.addEventListener("input",d),m.addEventListener("click",d),m.addEventListener("resize",d),window.addEventListener("scroll",d),window.addEventListener("resize",d),o.addEventListener("scroll",d),p&&p.addEventListener("scroll",d),window.addEventListener("click",f),window.addEventListener("focusin",f),i=()=>{m.removeEventListener("input",d),m.removeEventListener("click",d),m.removeEventListener("resize",d),window.removeEventListener("scroll",d),window.removeEventListener("resize",d),o.removeEventListener("scroll",d),p&&p.removeEventListener("scroll",d),window.removeEventListener("click",f),window.removeEventListener("focusin",f)},document.body.appendChild(u),d()}({completions:l,input:e,focusInput:()=>{const t=n+u;e.focus(),e.setSelectionRange(t,t)},onSelect:({val:r})=>{if(!t)return;const o=n+u,i=n+d().length;e.focus(),e.setRangeText(r.substr(u)+" ",o,i,"end"),t=!1},onRestyle:t=>{const n=e.getBoundingClientRect(),r=getComputedStyle(e);let o=document.getElementById("imaticAutocompleteWidget");const i=function(e,t){const n=document.createElement("span");n.textContent=t;const r=document.createElement("div");r.appendChild(n),Array.from(e).forEach((function(t){r.style.setProperty(t,e.getPropertyValue(t),e.getPropertyPriority(t))})),r.style.visibility="hidden",document.body.appendChild(r);const o={width:n.offsetWidth,height:n.offsetHeight};return r.remove(),o}(r,e.value.substr(0,e.selectionStart)).height;if(t.style.position="fixed",t.style.left=Math.max(0,n.x)+"px",t.style.top=n.y+i+5-e.scrollTop+"px",t.style.width=e.clientWidth+"px",o&&i){const r=o.getBoundingClientRect(),c=n.y-r.y+i;c>-5&&(t.style.top=n.y+i+10-e.scrollTop+c+"px")}}})};if(null!=r(o,l))return f(r(o,l));let p=document.querySelectorAll('select[name="handler_id"]'),m=[];for(let e=0;e<p.length;e++){let t=p[e].options;for(let e=0;e<t.length;e++)m.push(t[e].textContent)}m=m.filter((function(e){return"[Myself]"!==e&&"[Reporter]"!==e})),function(e,t){let n=t.filter((function(t){if(0===t.replace(/.*\s/,"").indexOf(e))return t.includes(e)}));o=function(e,t,n){return Object.assign({},e,{[t]:n})}(o,e,n),f()}(l,m)}}else u()};e.addEventListener("keydown",r=>{if(t){switch(r.code){case"ArrowDown":r.preventDefault(),l();break;case"ArrowUp":u();break;case"ArrowLeft":case"ArrowRight":setTimeout(()=>f(),0);break;case"Tab":{if(r.preventDefault(),!t)return;l();const o=a(),i=document.querySelector("#imaticAutocompleteWidget").firstChild;if(i){const r=i.textContent.replace(/.*\s/,""),l=n+o,s=n+d().length;e.focus(),e.setRangeText(r.substr(o)+" ",l,s,"end"),c(),t=!1}}}"ArrowDown"===r.code&&l()}}),e.addEventListener("input",e=>{f()})}document.querySelectorAll("#bugnote_text, #description, #steps_to_reproduce, #additional_info, #summary, #additional_information").forEach(e=>{s(e)})}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,