!function(e){var t={};function n(o){if(t[o])return t[o].exports;var r=t[o]={i:o,l:!1,exports:{}};return e[o].call(r.exports,r,r.exports,n),r.l=!0,r.exports}n.m=e,n.c=t,n.d=function(e,t,o){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:o})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var o=Object.create(null);if(n.r(o),Object.defineProperty(o,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var r in e)n.d(o,r,function(t){return e[t]}.bind(null,r));return o},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=0)}([function(e,t,n){"use strict";function o(e,t){return e[t]}n.r(t);let r={};let i;function l(){const e=document.querySelector("#imaticAutocompleteWidget");e&&(i(),e.remove())}function c(){const e=document.querySelector("#imaticAutocompleteWidget");e&&e.focus()}function u(e){let t=!1,n=0,u=null;function s(){t&&(t=!1,l())}function d(){return e.selectionStart-n}function a(){const t=d(),o=e.value.substr(n,t);return 0===o.length||null!=o.match(/[\n ]/)?null:o}const f=()=>{if(0!==e.selectionStart){if("@"===e.value[e.selectionStart-1])return t=!0,n=e.selectionStart,void(u=null);if(t){const c=a();if(null==c)return void s();const f=()=>{const c=function(e,t){for(let n=t.length;n>0;n--){const r=o(e,t.substr(0,n));if(null!=r)return r}}(r,a());if(null==c||0===c.length||!t)return l(),void(u=null);if(function(e,t){if(null==e||null==t)return null==e&&null==t;if(e.length!==t.length)return!1;for(let n=0;n<e.length;n++)if(e[n]!==t[n])return!1;return!0}(u,c))return;const s=d();u=c,function({completions:e,onSelect:t,focusInput:n,onRestyle:o,input:r}){l();let c=0;const u=e.map(e=>{const t=document.createTextNode(e),n=document.createElement("li");return n.setAttribute("tabindex",-1),n.appendChild(t),n}),s=document.createElement("ul");s.className="imatic-autocomplete",s.setAttribute("id","imaticAutocompleteWidget"),s.setAttribute("tabindex",-1),u.forEach(e=>s.appendChild(e));const d=new Set(["ArrowDown","ArrowUp","Enter"]);s.addEventListener("keydown",o=>{if(d.has(o.code))switch(o.preventDefault(),o.code){case"ArrowUp":{const e=s.querySelector(`li:nth-child(${c})`);e?(c--,e.focus()):n();break}case"ArrowDown":{const e=s.querySelector(`li:nth-child(${c+2})`);e&&(c++,e.focus())}break;case"Enter":if(t){const n=e[c].replace(/.*\s/,"");t({val:n}),l()}}}),s.addEventListener("focus",e=>{const t=s.querySelector("li");c=0,t&&t.focus()});const a=()=>o(s),f=e=>{e.target===r||e.target===s||s.contains(e.target)||l()},p=r.closest(".table-responsive");window.addEventListener("scroll",a),window.addEventListener("resize",a),r.addEventListener("scroll",a),p&&p.addEventListener("scroll",a),window.addEventListener("click",f),window.addEventListener("focusin",f),i=()=>{window.removeEventListener("scroll",a),window.removeEventListener("resize",a),r.removeEventListener("scroll",a),p&&p.removeEventListener("scroll",a),window.removeEventListener("click",f),window.removeEventListener("focusin",f)},document.body.appendChild(s),a()}({completions:c,input:e,focusInput:()=>{const t=n+s;e.focus(),e.setSelectionRange(t,t)},onSelect:({val:o})=>{if(!t)return;const r=n+s,i=n+a().length;e.focus(),e.setRangeText(o.substr(s)+" ",r,i,"end")},onRestyle:t=>{const n=e.getBoundingClientRect(),o=function(e,t){const n=document.createElement("span");n.textContent=t;const o=document.createElement("div");o.appendChild(n),Array.from(e).forEach((function(t){o.style.setProperty(t,e.getPropertyValue(t),e.getPropertyPriority(t))})),o.style.visibility="hidden",document.body.appendChild(o);const r={width:n.offsetWidth,height:n.offsetHeight};return o.remove(),r}(getComputedStyle(e),e.value.substr(0,e.selectionStart)).height;t.style.position="fixed",t.style.left=Math.max(0,n.x)+"px",t.style.top=n.y+o+5-e.scrollTop+"px",t.style.width=e.clientWidth+"px"}})};if(null!=o(r,c))return f(o(r,c));let p=document.querySelectorAll('select[name="handler_id"]'),m=[];for(let e=0;e<p.length;e++){let t=p[e].options;for(let e=0;e<t.length;e++)m.push(t[e].textContent)}m=m.filter((function(e){return"[Myself]"!==e&&"[Reporter]"!==e})),function(e,t){let n=t.filter((function(t){if(0===t.replace(/.*\s/,"").indexOf(e))return t.includes(e)}));r=function(e,t,n){return Object.assign({},e,{[t]:n})}(r,e,n),f()}(c,m)}}else s()};e.addEventListener("keydown",e=>{if(t){switch(e.code){case"ArrowDown":e.preventDefault(),c();break;case"ArrowUp":s();break;case"ArrowLeft":case"ArrowRight":setTimeout(()=>f(),0)}"ArrowDown"===e.code&&c()}}),e.addEventListener("input",e=>{f()})}document.querySelectorAll("#bugnote_text, #description, #steps_to_reproduce, #additional_info, #summary, #additional_information").forEach(e=>{u(e)})}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,