!function(e){var t={};function n(o){if(t[o])return t[o].exports;var r=t[o]={i:o,l:!1,exports:{}};return e[o].call(r.exports,r,r.exports,n),r.l=!0,r.exports}n.m=e,n.c=t,n.d=function(e,t,o){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:o})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var o=Object.create(null);if(n.r(o),Object.defineProperty(o,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var r in e)n.d(o,r,function(t){return e[t]}.bind(null,r));return o},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=0)}([function(e,t,n){"use strict";function o(e,t){const n=document.createElement("span");n.textContent=t;const o=document.createElement("div");o.appendChild(n),Array.from(e).forEach((function(t){o.style.setProperty(t,e.getPropertyValue(t),e.getPropertyPriority(t))})),o.style.visibility="hidden",document.body.appendChild(o);const r={width:n.offsetWidth,height:n.offsetHeight};return o.remove(),r}function r(e,t){return e[t]}n.r(t);let i={};const c=function(){const e=document.querySelector("[data-imatic-autocomplete-url]");if(null===e)return null;return e.dataset.imaticAutocompleteUrl}();let l;function u(){const e=document.querySelector("#imaticAutocompleteWidget");e&&(l(),e.remove())}function s(){const e=document.querySelector("#imaticAutocompleteWidget");e&&e.focus()}function d(e){let t=!1,n=0,d=null;function a(){t&&(t=!1,u())}function f(){return e.selectionStart-n}function p(){const t=f(),o=e.value.substr(n,t);return 0===o.length||null!=o.match(/[\n ]/)?null:o}const m=()=>{if(0!==e.selectionStart){if("@"===e.value[e.selectionStart-1])return t=!0,n=e.selectionStart,void(d=null);if(t){const s=p();if(null==s)return void a();const m=()=>{const c=function(e,t){for(let n=t.length;n>0;n--){const o=r(e,t.substr(0,n));if(null!=o)return o}}(i,p());if(null==c||0===c.length||!t)return u(),void(d=null);if(function(e,t){if(null==e||null==t)return null==e&&null==t;if(e.length!==t.length)return!1;for(let n=0;n<e.length;n++)if(e[n]!==t[n])return!1;return!0}(d,c))return;const s=f();d=c,function({completions:e,onSelect:t,focusInput:n,onRestyle:o,input:r}){u();let i=0;const c=e.map(e=>{const t=document.createTextNode(e),n=document.createElement("li");return n.setAttribute("tabindex",-1),n.appendChild(t),n}),s=document.createElement("ul");s.className="imatic-autocomplete",s.setAttribute("id","imaticAutocompleteWidget"),s.setAttribute("tabindex",-1),c.forEach(e=>s.appendChild(e));const d=new Set(["ArrowDown","ArrowUp","Enter"]);s.addEventListener("keydown",o=>{if(d.has(o.code))switch(o.preventDefault(),o.code){case"ArrowUp":{const e=s.querySelector(`li:nth-child(${i})`);e?(i--,e.focus()):n();break}case"ArrowDown":{const e=s.querySelector(`li:nth-child(${i+2})`);e&&(i++,e.focus())}break;case"Enter":t&&t({val:e[i]}),u()}}),s.addEventListener("click",e=>{var n=$(e.target).text();t({val:n}),u()}),s.addEventListener("focus",e=>{const t=s.querySelector("li");i=0,t&&t.focus()});const a=()=>o(s),f=e=>{e.target===r||e.target===s||s.contains(e.target)||u()},p=r.closest(".table-responsive");var m=document.getElementById("bugnote_text");m.addEventListener("input",a),m.addEventListener("click",a),m.addEventListener("resize",a),window.addEventListener("scroll",a),window.addEventListener("resize",a),r.addEventListener("scroll",a),p&&p.addEventListener("scroll",a),window.addEventListener("click",f),window.addEventListener("focusin",f),l=()=>{m.addEventListener("input",a),m.addEventListener("click",a),m.addEventListener("resize",a),window.removeEventListener("scroll",a),window.removeEventListener("resize",a),r.removeEventListener("scroll",a),p&&p.removeEventListener("scroll",a),window.removeEventListener("click",f),window.removeEventListener("focusin",f)},document.body.appendChild(s),a()}({completions:c,input:e,focusInput:()=>{const t=n+s;e.focus(),e.setSelectionRange(t,t)},onSelect:({val:o})=>{if(!t)return;const r=n+s;e.focus(),e.setRangeText(o.substr(s),r,r,"end")},onRestyle:t=>{const n=e.getBoundingClientRect(),r=getComputedStyle(e);let i=document.getElementById("imaticAutocompleteWidget");const c=o(r,e.value.substr(0,e.selectionStart)).height;if(t.style.position="fixed",t.style.left=Math.max(0,n.x)+"px",t.style.top=n.y+c+5-e.scrollTop+"px",t.style.width=e.clientWidth+"px",i){const i=o(r,e.value.substr(0,e.selectionStart)).height,c=document.getElementById("imaticAutocompleteWidget").getBoundingClientRect(),l=n.y-c.y+25;l>-20&&(t.style.top=n.y+i+5-e.scrollTop+l+"px")}}})};if(null!=r(i,s))return m(r(i,s));fetch(function(e){const t=new URL(c,location.href);return t.searchParams.append("search",e),t}(s)).then(e=>e.json()).then(e=>{i=function(e,t,n){return Object.assign({},e,{[t]:n})}(i,s,e),m()})}}else a()};e.addEventListener("keydown",e=>{if(t){switch(e.code){case"ArrowDown":e.preventDefault(),s();break;case"ArrowUp":a();break;case"ArrowLeft":case"ArrowRight":setTimeout(()=>m(),0)}"ArrowDown"===e.code&&s()}}),e.addEventListener("input",e=>{m()})}null!=c&&document.querySelectorAll("#bugnote_text, #description, #steps_to_reproduce, #additional_info, #summary, #additional_information").forEach(e=>{d(e)})}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,