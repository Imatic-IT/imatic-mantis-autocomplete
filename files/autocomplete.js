!function(e){var t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)n.d(r,o,function(t){return e[t]}.bind(null,o));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=0)}([function(e,t,n){"use strict";function r(e,t){return e[t]}n.r(t);let o={};let i;function c(){const e=document.querySelector("#imaticAutocompleteWidget");e&&(i(),e.remove())}function l(){const e=document.querySelector("#imaticAutocompleteWidget");e&&e.focus()}function s(e){let t=!1,n=0,s=null;function u(){t&&(t=!1,c())}function d(){return e.selectionStart-n}function a(){const t=d(),r=e.value.substr(n,t);return 0===r.length||null!=r.match(/[\n ]/)?null:r}const f=()=>{if(0!==e.selectionStart){if("@"===e.value[e.selectionStart-1])return t=!0,n=e.selectionStart,void(s=null);if(t){const l=a();if(null==l)return void u();const f=()=>{const l=function(e,t){for(let n=t.length;n>0;n--){const o=r(e,t.substr(0,n));if(null!=o)return o}}(o,a());if(null==l||0===l.length||!t)return c(),void(s=null);if(function(e,t){if(null==e||null==t)return null==e&&null==t;if(e.length!==t.length)return!1;for(let n=0;n<e.length;n++)if(e[n]!==t[n])return!1;return!0}(s,l))return;const u=d();s=l,function({completions:e,onSelect:t,focusInput:n,onRestyle:r,input:o}){c();let l=0;const s=e.map(e=>{const t=document.createTextNode(e),n=document.createElement("li");return n.setAttribute("tabindex",-1),n.appendChild(t),n}),u=document.createElement("ul");u.className="imatic-autocomplete",u.setAttribute("id","imaticAutocompleteWidget"),u.setAttribute("tabindex",-1),s.forEach(e=>u.appendChild(e));const d=new Set(["ArrowDown","ArrowUp","Enter","Tab"]);u.addEventListener("keydown",r=>{if(d.has(r.code))switch(r.preventDefault(),r.code){case"ArrowUp":{const e=u.querySelector(`li:nth-child(${l})`);e?(l--,e.focus()):n();break}case"ArrowDown":{const e=u.querySelector(`li:nth-child(${l+2})`);e&&(l++,e.focus())}break;case"Enter":if(t){function o(e){return e.replace(/.*\s/,"")}const n=o(e[l]);t({val:n}),c()}break;case"Tab":if(r.preventDefault(),t){function o(e){return e.replace(/.*\s/,"")}const n=o(e[l]);t({val:n}),c()}}}),u.addEventListener("click",e=>{var n=$(e.target).text();t({val:n}),c()}),u.addEventListener("focus",e=>{const t=u.querySelector("li");l=0,t&&t.focus()});const a=()=>r(u),f=e=>{e.target===o||e.target===u||u.contains(e.target)||c()},p=o.closest(".table-responsive");var m=document.getElementById("bugnote_text");m.addEventListener("input",a),m.addEventListener("click",a),m.addEventListener("resize",a),window.addEventListener("scroll",a),window.addEventListener("resize",a),o.addEventListener("scroll",a),p&&p.addEventListener("scroll",a),window.addEventListener("click",f),window.addEventListener("focusin",f),i=()=>{m.removeEventListener("input",a),m.removeEventListener("click",a),m.removeEventListener("resize",a),window.removeEventListener("scroll",a),window.removeEventListener("resize",a),o.removeEventListener("scroll",a),p&&p.removeEventListener("scroll",a),window.removeEventListener("click",f),window.removeEventListener("focusin",f)},document.body.appendChild(u),a()}({completions:l,input:e,focusInput:()=>{const t=n+u;e.focus(),e.setSelectionRange(t,t)},onSelect:({val:r})=>{if(!t)return;const o=n+u,i=n+a().length;e.focus(),e.setRangeText(r.substr(u)+" ",o,i,"end"),t=!1},onRestyle:t=>{const n=e.getBoundingClientRect(),r=getComputedStyle(e);let o=document.getElementById("imaticAutocompleteWidget");const i=function(e,t){const n=document.createElement("span");n.textContent=t;const r=document.createElement("div");r.appendChild(n),Array.from(e).forEach((function(t){r.style.setProperty(t,e.getPropertyValue(t),e.getPropertyPriority(t))})),r.style.visibility="hidden",document.body.appendChild(r);const o={width:n.offsetWidth,height:n.offsetHeight};return r.remove(),o}(r,e.value.substr(0,e.selectionStart)).height;if(t.style.position="fixed",t.style.left=Math.max(0,n.x)+"px",t.style.top=n.y+i+5-e.scrollTop+"px",t.style.width=e.clientWidth+"px",o&&i){const r=o.getBoundingClientRect(),c=n.y-r.y+i;c>-5&&(t.style.top=n.y+i+10-e.scrollTop+c+"px")}}})};if(null!=r(o,l))return f(r(o,l));let p=document.querySelectorAll('select[name="handler_id"]'),m=[];for(let e=0;e<p.length;e++){let t=p[e].options;for(let e=0;e<t.length;e++)m.push(t[e].textContent)}m=m.filter((function(e){return"[Myself]"!==e&&"[Reporter]"!==e})),function(e,t){let n=t.filter((function(t){if(0===t.replace(/.*\s/,"").indexOf(e))return t.includes(e)}));o=function(e,t,n){return Object.assign({},e,{[t]:n})}(o,e,n),f()}(l,m)}}else u()};e.addEventListener("keydown",r=>{if(t){switch(r.code){case"ArrowDown":r.preventDefault(),l();break;case"ArrowUp":u();break;case"ArrowLeft":case"ArrowRight":setTimeout(()=>f(),0);break;case"Tab":{if(r.preventDefault(),!t)return;l();const o=d(),i=document.querySelector("#imaticAutocompleteWidget").firstChild;if(i){const r=i.textContent.replace(/.*\s/,""),l=n+o,s=n+a().length;e.focus(),e.setRangeText(r.substr(o)+" ",l,s,"end"),c(),t=!1}}}"ArrowDown"===r.code&&l()}}),e.addEventListener("input",e=>{f()})}document.querySelectorAll("#bugnote_text, #description, #steps_to_reproduce, #additional_info, #summary, #additional_information").forEach(e=>{s(e)})}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vanMvY2FjaGUuanMiLCJ3ZWJwYWNrOi8vLy4vanMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vanMvdXRpbHMuanMiXSwibmFtZXMiOlsiaW5zdGFsbGVkTW9kdWxlcyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJtb2R1bGVJZCIsImV4cG9ydHMiLCJtb2R1bGUiLCJpIiwibCIsIm1vZHVsZXMiLCJjYWxsIiwibSIsImMiLCJkIiwibmFtZSIsImdldHRlciIsIm8iLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJnZXQiLCJyIiwiU3ltYm9sIiwidG9TdHJpbmdUYWciLCJ2YWx1ZSIsInQiLCJtb2RlIiwiX19lc01vZHVsZSIsIm5zIiwiY3JlYXRlIiwia2V5IiwiYmluZCIsIm4iLCJvYmplY3QiLCJwcm9wZXJ0eSIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwicCIsInMiLCJjYWNoZSIsInRlcm0iLCJyZXN1bHRDYWNoZSIsImRlc3Ryb3lMaXN0Rm4iLCJjbG9zZUF1dG9jb21wbGV0ZUxpc3RFbCIsImVsIiwiZG9jdW1lbnQiLCJxdWVyeVNlbGVjdG9yIiwicmVtb3ZlIiwiZm9jdXNBdXRvY29tcGxldGVMaXN0IiwiZm9jdXMiLCJhdXRvY29tcGxldGUiLCJhdXRvY29tcGxldGluZyIsInN0YXJ0U2VsIiwiYWN0aXZlQ29tcGxldGlvbnMiLCJzdG9wQXV0b2NvbXBsZXRlIiwiZ2V0U2VsZWN0aW9uTGVuZ3RoIiwic2VsZWN0aW9uU3RhcnQiLCJnZXRTZWxlY3Rpb24iLCJsZW4iLCJzZWxlY3Rpb24iLCJzdWJzdHIiLCJsZW5ndGgiLCJtYXRjaCIsImhhbmRsZUNoYW5nZSIsInYiLCJyZWNlaXZlQ29tcGxldGlvbnMiLCJjb21wbGV0aW9ucyIsInJlcyIsInYxIiwidjIiLCJmbGF0QXJyYXlzRXF1YWwiLCJvblNlbGVjdCIsImZvY3VzSW5wdXQiLCJvblJlc3R5bGUiLCJpbnB1dCIsImZvY3VzZWQiLCJjb21wbGV0aW9uRWxzIiwibWFwIiwidGV4dCIsImNyZWF0ZVRleHROb2RlIiwibGkiLCJjcmVhdGVFbGVtZW50Iiwic2V0QXR0cmlidXRlIiwiYXBwZW5kQ2hpbGQiLCJ1bCIsImNsYXNzTmFtZSIsImZvckVhY2giLCJjb250cm9sS2V5cyIsIlNldCIsImFkZEV2ZW50TGlzdGVuZXIiLCJlIiwiaGFzIiwiY29kZSIsInByZXZlbnREZWZhdWx0IiwibmV3QWN0aXZlIiwicmVtb3ZlSWNvbkZyb21OYW1lIiwibmFtZVdpdGhJY29uIiwicmVwbGFjZSIsIm5hbWVXaXRob3V0SWNvbiIsInZhbCIsIiQiLCJ0YXJnZXQiLCJmaXJzdExpIiwicmVzdHlsZSIsImNsb3NlSWZPdXRzaWRlVGFyZ2V0IiwiY29udGFpbnMiLCJzY0NvbnRhaW5lciIsImNsb3Nlc3QiLCJ0ZXh0QXJlYSIsImdldEVsZW1lbnRCeUlkIiwid2luZG93IiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsImJvZHkiLCJvcGVuQXV0b2NvbXBsZXRlTGlzdEVsIiwicmVxdWlyZWRTZWwiLCJzZXRTZWxlY3Rpb25SYW5nZSIsInJlcGxhY2VUbyIsInNldFJhbmdlVGV4dCIsImxpc3RFbCIsImxpc3RQb3MiLCJnZXRCb3VuZGluZ0NsaWVudFJlY3QiLCJlbFN0eWxlcyIsImdldENvbXB1dGVkU3R5bGUiLCJ3aWRnZXRJZCIsInRleHRIZWlnaHQiLCJjb21wdXRlZFN0eWxlIiwic3BhbiIsInRleHRDb250ZW50IiwiZGl2IiwiQXJyYXkiLCJmcm9tIiwic3R5bGUiLCJzZXRQcm9wZXJ0eSIsImdldFByb3BlcnR5VmFsdWUiLCJnZXRQcm9wZXJ0eVByaW9yaXR5IiwidmlzaWJpbGl0eSIsImRhdGEiLCJ3aWR0aCIsIm9mZnNldFdpZHRoIiwiaGVpZ2h0Iiwib2Zmc2V0SGVpZ2h0IiwicG9zaXRpb24iLCJsZWZ0IiwiTWF0aCIsIm1heCIsIngiLCJ0b3AiLCJ5Iiwic2Nyb2xsVG9wIiwiY2xpZW50V2lkdGgiLCJ3aWRnZXRQb3NpdGlvbiIsInBvc0RpZiIsImhhbmRsZXJzU2VsZWN0IiwicXVlcnlTZWxlY3RvckFsbCIsIm9wdGlvbnMiLCJqIiwicHVzaCIsImZpbHRlciIsImhhbmRsZXIiLCJ1c2VycyIsImZpbHRlcmVkVXNlcnMiLCJ1c2VyIiwiaW5kZXhPZiIsImluY2x1ZGVzIiwiYXNzaWduIiwiZmlsdGVyVXNlcnNCeVN0cmluZyIsInNldFRpbWVvdXQiLCJmaXJzdENoaWxkIiwidGV4dFZhbHVlIl0sIm1hcHBpbmdzIjoiYUFDRSxJQUFJQSxFQUFtQixHQUd2QixTQUFTQyxFQUFvQkMsR0FHNUIsR0FBR0YsRUFBaUJFLEdBQ25CLE9BQU9GLEVBQWlCRSxHQUFVQyxRQUduQyxJQUFJQyxFQUFTSixFQUFpQkUsR0FBWSxDQUN6Q0csRUFBR0gsRUFDSEksR0FBRyxFQUNISCxRQUFTLElBVVYsT0FOQUksRUFBUUwsR0FBVU0sS0FBS0osRUFBT0QsUUFBU0MsRUFBUUEsRUFBT0QsUUFBU0YsR0FHL0RHLEVBQU9FLEdBQUksRUFHSkYsRUFBT0QsUUFLZkYsRUFBb0JRLEVBQUlGLEVBR3hCTixFQUFvQlMsRUFBSVYsRUFHeEJDLEVBQW9CVSxFQUFJLFNBQVNSLEVBQVNTLEVBQU1DLEdBQzNDWixFQUFvQmEsRUFBRVgsRUFBU1MsSUFDbENHLE9BQU9DLGVBQWViLEVBQVNTLEVBQU0sQ0FBRUssWUFBWSxFQUFNQyxJQUFLTCxLQUtoRVosRUFBb0JrQixFQUFJLFNBQVNoQixHQUNYLG9CQUFYaUIsUUFBMEJBLE9BQU9DLGFBQzFDTixPQUFPQyxlQUFlYixFQUFTaUIsT0FBT0MsWUFBYSxDQUFFQyxNQUFPLFdBRTdEUCxPQUFPQyxlQUFlYixFQUFTLGFBQWMsQ0FBRW1CLE9BQU8sS0FRdkRyQixFQUFvQnNCLEVBQUksU0FBU0QsRUFBT0UsR0FFdkMsR0FEVSxFQUFQQSxJQUFVRixFQUFRckIsRUFBb0JxQixJQUMvQixFQUFQRSxFQUFVLE9BQU9GLEVBQ3BCLEdBQVcsRUFBUEUsR0FBOEIsaUJBQVZGLEdBQXNCQSxHQUFTQSxFQUFNRyxXQUFZLE9BQU9ILEVBQ2hGLElBQUlJLEVBQUtYLE9BQU9ZLE9BQU8sTUFHdkIsR0FGQTFCLEVBQW9Ca0IsRUFBRU8sR0FDdEJYLE9BQU9DLGVBQWVVLEVBQUksVUFBVyxDQUFFVCxZQUFZLEVBQU1LLE1BQU9BLElBQ3RELEVBQVBFLEdBQTRCLGlCQUFURixFQUFtQixJQUFJLElBQUlNLEtBQU9OLEVBQU9yQixFQUFvQlUsRUFBRWUsRUFBSUUsRUFBSyxTQUFTQSxHQUFPLE9BQU9OLEVBQU1NLElBQVFDLEtBQUssS0FBTUQsSUFDOUksT0FBT0YsR0FJUnpCLEVBQW9CNkIsRUFBSSxTQUFTMUIsR0FDaEMsSUFBSVMsRUFBU1QsR0FBVUEsRUFBT3FCLFdBQzdCLFdBQXdCLE9BQU9yQixFQUFnQixTQUMvQyxXQUE4QixPQUFPQSxHQUV0QyxPQURBSCxFQUFvQlUsRUFBRUUsRUFBUSxJQUFLQSxHQUM1QkEsR0FJUlosRUFBb0JhLEVBQUksU0FBU2lCLEVBQVFDLEdBQVksT0FBT2pCLE9BQU9rQixVQUFVQyxlQUFlMUIsS0FBS3VCLEVBQVFDLElBR3pHL0IsRUFBb0JrQyxFQUFJLEdBSWpCbEMsRUFBb0JBLEVBQW9CbUMsRUFBSSxHLCtCQzFFOUMsU0FBU2xCLEVBQUltQixFQUFPQyxHQUN2QixPQUFPRCxFQUFNQyxHLE9DTmpCLElBQUlDLEVERk8sR0NJWCxJQUFJQyxFQXNLSixTQUFTQyxJQUNMLE1BQU1DLEVBQUtDLFNBQVNDLGNBQWMsNkJBQzlCRixJQUNBRixJQUNBRSxFQUFHRyxVQUlYLFNBQVNDLElBQ0wsTUFBTUosRUFBS0MsU0FBU0MsY0FBYyw2QkFDN0JGLEdBSUxBLEVBQUdLLFFBR1AsU0FBU0MsRUFBYU4sR0FDbEIsSUFBSU8sR0FBaUIsRUFDakJDLEVBQVcsRUFDWEMsRUFBb0IsS0FFeEIsU0FBU0MsSUFDQUgsSUFJTEEsR0FBaUIsRUFDakJSLEtBR0osU0FBU1ksSUFDTCxPQUFPWCxFQUFHWSxlQUFpQkosRUFHL0IsU0FBU0ssSUFDTCxNQUFNQyxFQUFNSCxJQUNOSSxFQUFZZixFQUFHcEIsTUFBTW9DLE9BQU9SLEVBQVVNLEdBRTVDLE9BQXlCLElBQXJCQyxFQUFVRSxRQUE0QyxNQUE1QkYsRUFBVUcsTUFBTSxTQUNuQyxLQUdKSCxFQUdYLE1BQU1JLEVBQWUsS0FDakIsR0FBMEIsSUFBdEJuQixFQUFHWSxlQUFQLENBS0EsR0FBd0MsTUFBcENaLEVBQUdwQixNQUFNb0IsRUFBR1ksZUFBaUIsR0FJN0IsT0FIQUwsR0FBaUIsRUFDakJDLEVBQVdSLEVBQUdZLG9CQUNkSCxFQUFvQixNQUl4QixHQUFJRixFQUFnQixDQUNoQixNQUFNYSxFQUFJUCxJQUNWLEdBQVMsTUFBTE8sRUFFQSxZQURBVixJQUlKLE1BQU1XLEVBQXFCLEtBQ3ZCLE1BQU1DLEVEOU5mLFNBQXNCM0IsRUFBT0MsR0FDaEMsSUFBSyxJQUFJakMsRUFBSWlDLEVBQUtxQixPQUFRdEQsRUFBSSxFQUFHQSxJQUFLLENBQ2xDLE1BQU00RCxFQUFNL0MsRUFBSW1CLEVBQU9DLEVBQUtvQixPQUFPLEVBQUdyRCxJQUN0QyxHQUFXLE1BQVA0RCxFQUNBLE9BQU9BLEdDME5pQixDQUNoQjFCLEVBQ0FnQixLQUVKLEdBQ21CLE1BQWZTLEdBQ3VCLElBQXZCQSxFQUFZTCxTQUNYVixFQUlELE9BRkFSLFNBQ0FVLEVBQW9CLE1BSXhCLEdBclBoQixTQUF5QmUsRUFBSUMsR0FDekIsR0FBVSxNQUFORCxHQUFvQixNQUFOQyxFQUNkLE9BQWEsTUFBTkQsR0FBb0IsTUFBTkMsRUFHekIsR0FBSUQsRUFBR1AsU0FBV1EsRUFBR1IsT0FDakIsT0FBTyxFQUdYLElBQUssSUFBSXRELEVBQUksRUFBR0EsRUFBSTZELEVBQUdQLE9BQVF0RCxJQUMzQixHQUFJNkQsRUFBRzdELEtBQU84RCxFQUFHOUQsR0FDYixPQUFPLEVBSWYsT0FBTyxFQXNPUytELENBQWdCakIsRUFBbUJhLEdBQ25DLE9BR0osTUFBTVIsRUFBTUgsSUFDWkYsRUFBb0JhLEVBeE9wQyxVQUFnQyxZQUNJQSxFQUFXLFNBQ1hLLEVBQVEsV0FDUkMsRUFBVSxVQUNWQyxFQUFTLE1BQ1RDLElBRWhDL0IsSUFFQSxJQUFJZ0MsRUFBVSxFQUVkLE1BQU1DLEVBQWdCVixFQUFZVyxJQUFLYixJQUNuQyxNQUFNYyxFQUFPakMsU0FBU2tDLGVBQWVmLEdBRS9CZ0IsRUFBS25DLFNBQVNvQyxjQUFjLE1BSWxDLE9BSEFELEVBQUdFLGFBQWEsWUFBYSxHQUM3QkYsRUFBR0csWUFBWUwsR0FFUkUsSUFHTEksRUFBS3ZDLFNBQVNvQyxjQUFjLE1BQ2xDRyxFQUFHQyxVQUFZLHNCQUNmRCxFQUFHRixhQUFhLEtBQU0sNEJBQ3RCRSxFQUFHRixhQUFhLFlBQWEsR0FDN0JOLEVBQWNVLFFBQVMxQyxHQUFPd0MsRUFBR0QsWUFBWXZDLElBRTdDLE1BQU0yQyxFQUFjLElBQUlDLElBQUksQ0FBQyxZQUFhLFVBQVcsUUFBUyxRQUU5REosRUFBR0ssaUJBQWlCLFVBQVlDLElBQzVCLEdBQUtILEVBQVlJLElBQUlELEVBQUVFLE1BTXZCLE9BRkFGLEVBQUVHLGlCQUVNSCxFQUFFRSxNQUNOLElBQUssVUFBVyxDQUNaLE1BQU1FLEVBQVlWLEVBQUd0QyxjQUFjLGdCQUFnQjZCLE1BQy9DbUIsR0FDQW5CLElBQ0FtQixFQUFVN0MsU0FFVnVCLElBRUosTUFFSixJQUFLLFlBQWEsQ0FDZCxNQUFNc0IsRUFBWVYsRUFBR3RDLGNBQ2pCLGdCQUFnQjZCLEVBQVUsTUFFMUJtQixJQUNBbkIsSUFDQW1CLEVBQVU3QyxTQUdkLE1BQ0osSUFBSyxRQUNELEdBQUlzQixFQUFVLENBQ1YsU0FBU3dCLEVBQW1CQyxHQUN4QixPQUFPQSxFQUFhQyxRQUFRLE9BQVEsSUFHeEMsTUFBTUMsRUFBa0JILEVBQW1CN0IsRUFBWVMsSUFDdkRKLEVBQVMsQ0FBQzRCLElBQUtELElBQ2Z2RCxJQUdKLE1BQ0osSUFBSyxNQUVELEdBREErQyxFQUFFRyxpQkFDRXRCLEVBQVUsQ0FDVixTQUFTd0IsRUFBbUJDLEdBQ3hCLE9BQU9BLEVBQWFDLFFBQVEsT0FBUSxJQUd4QyxNQUFNQyxFQUFrQkgsRUFBbUI3QixFQUFZUyxJQUN2REosRUFBUyxDQUFDNEIsSUFBS0QsSUFDZnZELFFBTWhCeUMsRUFBR0ssaUJBQWlCLFFBQVVDLElBQzFCLElBQUlaLEVBQU9zQixFQUFFVixFQUFFVyxRQUFRdkIsT0FDdkJQLEVBQVMsQ0FBQzRCLElBQUtyQixJQUNmbkMsTUFHSnlDLEVBQUdLLGlCQUFpQixRQUFVQyxJQUMxQixNQUFNWSxFQUFVbEIsRUFBR3RDLGNBQWMsTUFDakM2QixFQUFVLEVBQ04yQixHQUNBQSxFQUFRckQsVUFJaEIsTUFBTXNELEVBQVUsSUFBTTlCLEVBQVVXLEdBRTFCb0IsRUFBd0JkLElBQ3RCQSxFQUFFVyxTQUFXM0IsR0FBU2dCLEVBQUVXLFNBQVdqQixHQUFNQSxFQUFHcUIsU0FBU2YsRUFBRVcsU0FJM0QxRCxLQUdFK0QsRUFBY2hDLEVBQU1pQyxRQUFRLHFCQUVsQyxJQUFJQyxFQUFXL0QsU0FBU2dFLGVBQWUsZ0JBRXZDRCxFQUFTbkIsaUJBQWlCLFFBQVNjLEdBQ25DSyxFQUFTbkIsaUJBQWlCLFFBQVNjLEdBQ25DSyxFQUFTbkIsaUJBQWlCLFNBQVVjLEdBRXBDTyxPQUFPckIsaUJBQWlCLFNBQVVjLEdBQ2xDTyxPQUFPckIsaUJBQWlCLFNBQVVjLEdBQ2xDN0IsRUFBTWUsaUJBQWlCLFNBQVVjLEdBQzdCRyxHQUNBQSxFQUFZakIsaUJBQWlCLFNBQVVjLEdBRTNDTyxPQUFPckIsaUJBQWlCLFFBQVNlLEdBQ2pDTSxPQUFPckIsaUJBQWlCLFVBQVdlLEdBRW5DOUQsRUFBZ0IsS0FFWmtFLEVBQVNHLG9CQUFvQixRQUFTUixHQUN0Q0ssRUFBU0csb0JBQW9CLFFBQVNSLEdBQ3RDSyxFQUFTRyxvQkFBb0IsU0FBVVIsR0FFdkNPLE9BQU9DLG9CQUFvQixTQUFVUixHQUNyQ08sT0FBT0Msb0JBQW9CLFNBQVVSLEdBQ3JDN0IsRUFBTXFDLG9CQUFvQixTQUFVUixHQUNoQ0csR0FDQUEsRUFBWUssb0JBQW9CLFNBQVVSLEdBRTlDTyxPQUFPQyxvQkFBb0IsUUFBU1AsR0FDcENNLE9BQU9DLG9CQUFvQixVQUFXUCxJQUcxQzNELFNBQVNtRSxLQUFLN0IsWUFBWUMsR0FFMUJtQixJQTJGWVUsQ0FBdUIsQ0FDbkIvQyxZQUFhQSxFQUNiUSxNQUFPOUIsRUFDUDRCLFdBQVksS0FDUixNQUFNMEMsRUFBYzlELEVBQVdNLEVBQy9CZCxFQUFHSyxRQUNITCxFQUFHdUUsa0JBQWtCRCxFQUFhQSxJQUV0QzNDLFNBQVUsRUFBRTRCLFVBQ1IsSUFBS2hELEVBQ0QsT0FHSixNQUFNK0QsRUFBYzlELEVBQVdNLEVBQ3pCMEQsRUFBWWhFLEVBQVdLLElBQWVJLE9BRTVDakIsRUFBR0ssUUFDSEwsRUFBR3lFLGFBQ0NsQixFQUFJdkMsT0FBT0YsR0FBTyxJQUNsQndELEVBQ0FFLEVBQ0EsT0FFSmpFLEdBQWlCLEdBRXJCc0IsVUFBWTZDLElBQ1IsTUFBTUMsRUFBVTNFLEVBQUc0RSx3QkFDYkMsRUFBV0MsaUJBQWlCOUUsR0FDbEMsSUFBSStFLEVBQVc5RSxTQUFTZ0UsZUFBZSw0QkFFdkMsTUFBTWUsRUMzUnZCLFNBQWtCQyxFQUFlL0MsR0FDcEMsTUFBTWdELEVBQU9qRixTQUFTb0MsY0FBYyxRQUNwQzZDLEVBQUtDLFlBQWNqRCxFQUVuQixNQUFNa0QsRUFBTW5GLFNBQVNvQyxjQUFjLE9BQ25DK0MsRUFBSTdDLFlBQVkyQyxHQUNoQkcsTUFBTUMsS0FBS0wsR0FBZXZDLFNBQVEsU0FBVXhELEdBQ3hDa0csRUFBSUcsTUFBTUMsWUFDTnRHLEVBQ0ErRixFQUFjUSxpQkFBaUJ2RyxHQUMvQitGLEVBQWNTLG9CQUFvQnhHLE9BRzFDa0csRUFBSUcsTUFBTUksV0FBYSxTQUN2QjFGLFNBQVNtRSxLQUFLN0IsWUFBWTZDLEdBRTFCLE1BQU1RLEVBQU8sQ0FBQ0MsTUFBT1gsRUFBS1ksWUFBYUMsT0FBUWIsRUFBS2MsY0FJcEQsT0FGQVosRUFBSWpGLFNBRUd5RixFRHVRZ0MsQ0FDZmYsRUFDQTdFLEVBQUdwQixNQUFNb0MsT0FBTyxFQUFHaEIsRUFBR1ksaUJBQ3hCbUYsT0FRRixHQU5BckIsRUFBT2EsTUFBTVUsU0FBVyxRQUN4QnZCLEVBQU9hLE1BQU1XLEtBQU9DLEtBQUtDLElBQUksRUFBR3pCLEVBQVEwQixHQUFLLEtBQzdDM0IsRUFBT2EsTUFBTWUsSUFDVDNCLEVBQVE0QixFQUFJdkIsRUFBYSxFQUFJaEYsRUFBR3dHLFVBQVksS0FDaEQ5QixFQUFPYSxNQUFNTSxNQUFRN0YsRUFBR3lHLFlBQWMsS0FFbEMxQixHQUNJQyxFQUFZLENBQ1osTUFBTTBCLEVBQWlCM0IsRUFBU0gsd0JBQzFCK0IsRUFBU2hDLEVBQVE0QixFQUFJRyxFQUFlSCxFQUFJdkIsRUFDMUMyQixHQUFVLElBQ1ZqQyxFQUFPYSxNQUFNZSxJQUFNM0IsRUFBUTRCLEVBQUl2QixFQUFhLEdBQUtoRixFQUFHd0csVUFBWUcsRUFBUyxXQU9qRyxHRDNTbUIsTUFBcEJuSSxFQzJTZXFCLEVBQWF1QixHQUN2QixPQUFPQyxFQUFtQixFQUFVeEIsRUFBYXVCLElBR3JELElBQUl3RixFQUFpQjNHLFNBQVM0RyxpQkFBaUIsNkJBQzNDdkYsRUFBYyxHQUVsQixJQUFLLElBQUkzRCxFQUFJLEVBQUdBLEVBQUlpSixFQUFlM0YsT0FBUXRELElBQUssQ0FDNUMsSUFBSW1KLEVBQVVGLEVBQWVqSixHQUFHbUosUUFDaEMsSUFBSyxJQUFJQyxFQUFJLEVBQUdBLEVBQUlELEVBQVE3RixPQUFROEYsSUFDaEN6RixFQUFZMEYsS0FBS0YsRUFBUUMsR0FBRzVCLGFBSXBDN0QsRUFBY0EsRUFBWTJGLFFBQU8sU0FBVUMsR0FDdkMsTUFBbUIsYUFBWkEsR0FBc0MsZUFBWkEsS0FNckMsU0FBNkI5RixFQUFHK0YsR0FFNUIsSUFBSUMsRUFBZ0JELEVBQU1GLFFBQU8sU0FBVUksR0FFdkMsR0FBNEMsSUFBeENBLEVBQUtoRSxRQUFRLE9BQVEsSUFBSWlFLFFBQVFsRyxHQUNqQyxPQUFPaUcsRUFBS0UsU0FBU25HLE1BSTdCdkIsRURsVlQsU0FBYUYsRUFBT0MsRUFBTWhCLEdBQzdCLE9BQU9QLE9BQU9tSixPQUFPLEdBQUk3SCxFQUFPLENBQUMsQ0FBQ0MsR0FBT2hCLElDaVZmLENBQVVpQixFQUFhdUIsRUFBR2dHLEdBQ3hDL0YsSUFiSm9HLENBQW9CckcsRUFBR0UsU0EvR3ZCWixLQWlJUlYsRUFBRzZDLGlCQUFpQixVQUFZQyxJQUM1QixHQUFLdkMsRUFBTCxDQUlBLE9BQVF1QyxFQUFFRSxNQUNOLElBQUssWUFDREYsRUFBRUcsaUJBQ0Y3QyxJQUNBLE1BQ0osSUFBSyxVQUNETSxJQUNBLE1BQ0osSUFBSyxZQUNMLElBQUssYUFFRGdILFdBQVcsSUFBTXZHLElBQWdCLEdBQ2pDLE1BQ0osSUFBSSxNQUFPLENBRVAsR0FEQTJCLEVBQUVHLGtCQUNHMUMsRUFDRCxPQUVKSCxJQUVBLE1BQU1VLEVBQU1ILElBQ05nSCxFQUFhMUgsU0FBU0MsY0FBYyw2QkFBNkJ5SCxXQUV2RSxHQUFJQSxFQUFZLENBRVosTUFBTUMsRUFBWUQsRUFBV3hDLFlBQVk5QixRQUFRLE9BQVEsSUFFbkRpQixFQUFjOUQsRUFBV00sRUFDekIwRCxFQUFZaEUsRUFBV0ssSUFBZUksT0FFNUNqQixFQUFHSyxRQUNITCxFQUFHeUUsYUFDQ21ELEVBQVU1RyxPQUFPRixHQUFPLElBQ3hCd0QsRUFDQUUsRUFDQSxPQUVKekUsSUFFQVEsR0FBaUIsSUFLZCxjQUFYdUMsRUFBRUUsTUFDRjVDLE9BR1JKLEVBQUc2QyxpQkFBaUIsUUFBVUMsSUFDMUIzQixNQUtSbEIsU0FDSzRHLGlCQUNHLHlHQUVIbkUsUUFBUzFDLElBQ05NLEVBQWFOIiwiZmlsZSI6ImF1dG9jb21wbGV0ZS5qcyIsInNvdXJjZXNDb250ZW50IjpbIiBcdC8vIFRoZSBtb2R1bGUgY2FjaGVcbiBcdHZhciBpbnN0YWxsZWRNb2R1bGVzID0ge307XG5cbiBcdC8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG4gXHRmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cbiBcdFx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG4gXHRcdGlmKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdKSB7XG4gXHRcdFx0cmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7XG4gXHRcdH1cbiBcdFx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcbiBcdFx0dmFyIG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdID0ge1xuIFx0XHRcdGk6IG1vZHVsZUlkLFxuIFx0XHRcdGw6IGZhbHNlLFxuIFx0XHRcdGV4cG9ydHM6IHt9XG4gXHRcdH07XG5cbiBcdFx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG4gXHRcdG1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG4gXHRcdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcbiBcdFx0bW9kdWxlLmwgPSB0cnVlO1xuXG4gXHRcdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG4gXHRcdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbiBcdH1cblxuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tID0gbW9kdWxlcztcblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGVcbiBcdF9fd2VicGFja19yZXF1aXJlX18uYyA9IGluc3RhbGxlZE1vZHVsZXM7XG5cbiBcdC8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb24gZm9yIGhhcm1vbnkgZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kID0gZnVuY3Rpb24oZXhwb3J0cywgbmFtZSwgZ2V0dGVyKSB7XG4gXHRcdGlmKCFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywgbmFtZSkpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgbmFtZSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGdldHRlciB9KTtcbiBcdFx0fVxuIFx0fTtcblxuIFx0Ly8gZGVmaW5lIF9fZXNNb2R1bGUgb24gZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yID0gZnVuY3Rpb24oZXhwb3J0cykge1xuIFx0XHRpZih0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wudG9TdHJpbmdUYWcpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcbiBcdFx0fVxuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuIFx0fTtcblxuIFx0Ly8gY3JlYXRlIGEgZmFrZSBuYW1lc3BhY2Ugb2JqZWN0XG4gXHQvLyBtb2RlICYgMTogdmFsdWUgaXMgYSBtb2R1bGUgaWQsIHJlcXVpcmUgaXRcbiBcdC8vIG1vZGUgJiAyOiBtZXJnZSBhbGwgcHJvcGVydGllcyBvZiB2YWx1ZSBpbnRvIHRoZSBuc1xuIFx0Ly8gbW9kZSAmIDQ6IHJldHVybiB2YWx1ZSB3aGVuIGFscmVhZHkgbnMgb2JqZWN0XG4gXHQvLyBtb2RlICYgOHwxOiBiZWhhdmUgbGlrZSByZXF1aXJlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnQgPSBmdW5jdGlvbih2YWx1ZSwgbW9kZSkge1xuIFx0XHRpZihtb2RlICYgMSkgdmFsdWUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKHZhbHVlKTtcbiBcdFx0aWYobW9kZSAmIDgpIHJldHVybiB2YWx1ZTtcbiBcdFx0aWYoKG1vZGUgJiA0KSAmJiB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnICYmIHZhbHVlICYmIHZhbHVlLl9fZXNNb2R1bGUpIHJldHVybiB2YWx1ZTtcbiBcdFx0dmFyIG5zID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yKG5zKTtcbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG5zLCAnZGVmYXVsdCcsIHsgZW51bWVyYWJsZTogdHJ1ZSwgdmFsdWU6IHZhbHVlIH0pO1xuIFx0XHRpZihtb2RlICYgMiAmJiB0eXBlb2YgdmFsdWUgIT0gJ3N0cmluZycpIGZvcih2YXIga2V5IGluIHZhbHVlKSBfX3dlYnBhY2tfcmVxdWlyZV9fLmQobnMsIGtleSwgZnVuY3Rpb24oa2V5KSB7IHJldHVybiB2YWx1ZVtrZXldOyB9LmJpbmQobnVsbCwga2V5KSk7XG4gXHRcdHJldHVybiBucztcbiBcdH07XG5cbiBcdC8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSBmdW5jdGlvbihtb2R1bGUpIHtcbiBcdFx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0RGVmYXVsdCgpIHsgcmV0dXJuIG1vZHVsZVsnZGVmYXVsdCddOyB9IDpcbiBcdFx0XHRmdW5jdGlvbiBnZXRNb2R1bGVFeHBvcnRzKCkgeyByZXR1cm4gbW9kdWxlOyB9O1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCAnYScsIGdldHRlcik7XG4gXHRcdHJldHVybiBnZXR0ZXI7XG4gXHR9O1xuXG4gXHQvLyBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGxcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubyA9IGZ1bmN0aW9uKG9iamVjdCwgcHJvcGVydHkpIHsgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIHByb3BlcnR5KTsgfTtcblxuIFx0Ly8gX193ZWJwYWNrX3B1YmxpY19wYXRoX19cbiBcdF9fd2VicGFja19yZXF1aXJlX18ucCA9IFwiXCI7XG5cblxuIFx0Ly8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4gXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXyhfX3dlYnBhY2tfcmVxdWlyZV9fLnMgPSAwKTtcbiIsImV4cG9ydCBmdW5jdGlvbiBjcmVhdGUoKSB7XG4gICAgcmV0dXJuIHt9O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gc2V0KGNhY2hlLCB0ZXJtLCB2YWx1ZSkge1xuICAgIHJldHVybiBPYmplY3QuYXNzaWduKHt9LCBjYWNoZSwge1t0ZXJtXTogdmFsdWV9KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldChjYWNoZSwgdGVybSkge1xuICAgIHJldHVybiBjYWNoZVt0ZXJtXTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGhhcyhjYWNoZSwgdGVybSkge1xuICAgIHJldHVybiBnZXQoY2FjaGUsIHRlcm0pICE9IG51bGw7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRCZXN0TWF0Y2goY2FjaGUsIHRlcm0pIHtcbiAgICBmb3IgKGxldCBpID0gdGVybS5sZW5ndGg7IGkgPiAwOyBpLS0pIHtcbiAgICAgICAgY29uc3QgcmVzID0gZ2V0KGNhY2hlLCB0ZXJtLnN1YnN0cigwLCBpKSk7XG4gICAgICAgIGlmIChyZXMgIT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuIHJlcztcbiAgICAgICAgfVxuICAgIH1cbn1cbiIsImltcG9ydCAqIGFzIHUgZnJvbSAnLi91dGlscyc7XG5pbXBvcnQgKiBhcyBjYWNoZSBmcm9tICcuL2NhY2hlJztcblxubGV0IHJlc3VsdENhY2hlID0gY2FjaGUuY3JlYXRlKCk7XG5jb25zdCBtYXhfbGVuID0gMTkxO1xubGV0IGRlc3Ryb3lMaXN0Rm47XG5cbmZ1bmN0aW9uIGZsYXRBcnJheXNFcXVhbCh2MSwgdjIpIHtcbiAgICBpZiAodjEgPT0gbnVsbCB8fCB2MiA9PSBudWxsKSB7XG4gICAgICAgIHJldHVybiB2MSA9PSBudWxsICYmIHYyID09IG51bGw7XG4gICAgfVxuXG4gICAgaWYgKHYxLmxlbmd0aCAhPT0gdjIubGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHYxLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGlmICh2MVtpXSAhPT0gdjJbaV0pIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB0cnVlO1xufVxuXG5mdW5jdGlvbiBvcGVuQXV0b2NvbXBsZXRlTGlzdEVsKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbXBsZXRpb25zLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb25TZWxlY3QsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb2N1c0lucHV0LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb25SZXN0eWxlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5wdXQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pIHtcbiAgICBjbG9zZUF1dG9jb21wbGV0ZUxpc3RFbCgpO1xuXG4gICAgbGV0IGZvY3VzZWQgPSAwO1xuXG4gICAgY29uc3QgY29tcGxldGlvbkVscyA9IGNvbXBsZXRpb25zLm1hcCgodikgPT4ge1xuICAgICAgICBjb25zdCB0ZXh0ID0gZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUodik7XG5cbiAgICAgICAgY29uc3QgbGkgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdsaScpO1xuICAgICAgICBsaS5zZXRBdHRyaWJ1dGUoJ3RhYmluZGV4JywgLTEpO1xuICAgICAgICBsaS5hcHBlbmRDaGlsZCh0ZXh0KTtcblxuICAgICAgICByZXR1cm4gbGk7XG4gICAgfSk7XG5cbiAgICBjb25zdCB1bCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3VsJyk7XG4gICAgdWwuY2xhc3NOYW1lID0gJ2ltYXRpYy1hdXRvY29tcGxldGUnO1xuICAgIHVsLnNldEF0dHJpYnV0ZSgnaWQnLCAnaW1hdGljQXV0b2NvbXBsZXRlV2lkZ2V0Jyk7XG4gICAgdWwuc2V0QXR0cmlidXRlKCd0YWJpbmRleCcsIC0xKTtcbiAgICBjb21wbGV0aW9uRWxzLmZvckVhY2goKGVsKSA9PiB1bC5hcHBlbmRDaGlsZChlbCkpO1xuXG4gICAgY29uc3QgY29udHJvbEtleXMgPSBuZXcgU2V0KFsnQXJyb3dEb3duJywgJ0Fycm93VXAnLCAnRW50ZXInLCAnVGFiJ10pO1xuXG4gICAgdWwuYWRkRXZlbnRMaXN0ZW5lcigna2V5ZG93bicsIChlKSA9PiB7XG4gICAgICAgIGlmICghY29udHJvbEtleXMuaGFzKGUuY29kZSkpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKTsgLy8gcHJldmVudCBzY3JvbGxpbmdcblxuICAgICAgICBzd2l0Y2ggKGUuY29kZSkge1xuICAgICAgICAgICAgY2FzZSAnQXJyb3dVcCc6IHtcbiAgICAgICAgICAgICAgICBjb25zdCBuZXdBY3RpdmUgPSB1bC5xdWVyeVNlbGVjdG9yKGBsaTpudGgtY2hpbGQoJHtmb2N1c2VkfSlgKTtcbiAgICAgICAgICAgICAgICBpZiAobmV3QWN0aXZlKSB7XG4gICAgICAgICAgICAgICAgICAgIGZvY3VzZWQtLTtcbiAgICAgICAgICAgICAgICAgICAgbmV3QWN0aXZlLmZvY3VzKCk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgZm9jdXNJbnB1dCgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhc2UgJ0Fycm93RG93bic6IHtcbiAgICAgICAgICAgICAgICBjb25zdCBuZXdBY3RpdmUgPSB1bC5xdWVyeVNlbGVjdG9yKFxuICAgICAgICAgICAgICAgICAgICBgbGk6bnRoLWNoaWxkKCR7Zm9jdXNlZCArIDJ9KWBcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIGlmIChuZXdBY3RpdmUpIHtcbiAgICAgICAgICAgICAgICAgICAgZm9jdXNlZCsrO1xuICAgICAgICAgICAgICAgICAgICBuZXdBY3RpdmUuZm9jdXMoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdFbnRlcic6IHtcbiAgICAgICAgICAgICAgICBpZiAob25TZWxlY3QpIHtcbiAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gcmVtb3ZlSWNvbkZyb21OYW1lKG5hbWVXaXRoSWNvbikge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5hbWVXaXRoSWNvbi5yZXBsYWNlKC8uKlxccy8sIFwiXCIpO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgY29uc3QgbmFtZVdpdGhvdXRJY29uID0gcmVtb3ZlSWNvbkZyb21OYW1lKGNvbXBsZXRpb25zW2ZvY3VzZWRdKTtcbiAgICAgICAgICAgICAgICAgICAgb25TZWxlY3Qoe3ZhbDogbmFtZVdpdGhvdXRJY29ufSk7XG4gICAgICAgICAgICAgICAgICAgIGNsb3NlQXV0b2NvbXBsZXRlTGlzdEVsKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnVGFiJzoge1xuICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKVxuICAgICAgICAgICAgICAgIGlmIChvblNlbGVjdCkge1xuICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiByZW1vdmVJY29uRnJvbU5hbWUobmFtZVdpdGhJY29uKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbmFtZVdpdGhJY29uLnJlcGxhY2UoLy4qXFxzLywgXCJcIik7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBjb25zdCBuYW1lV2l0aG91dEljb24gPSByZW1vdmVJY29uRnJvbU5hbWUoY29tcGxldGlvbnNbZm9jdXNlZF0pO1xuICAgICAgICAgICAgICAgICAgICBvblNlbGVjdCh7dmFsOiBuYW1lV2l0aG91dEljb259KTtcbiAgICAgICAgICAgICAgICAgICAgY2xvc2VBdXRvY29tcGxldGVMaXN0RWwoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgIHVsLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKGUpID0+IHtcbiAgICAgICAgdmFyIHRleHQgPSAkKGUudGFyZ2V0KS50ZXh0KCk7XG4gICAgICAgIG9uU2VsZWN0KHt2YWw6IHRleHR9KTtcbiAgICAgICAgY2xvc2VBdXRvY29tcGxldGVMaXN0RWwoKTtcbiAgICB9KVxuXG4gICAgdWwuYWRkRXZlbnRMaXN0ZW5lcignZm9jdXMnLCAoZSkgPT4ge1xuICAgICAgICBjb25zdCBmaXJzdExpID0gdWwucXVlcnlTZWxlY3RvcignbGknKTtcbiAgICAgICAgZm9jdXNlZCA9IDA7XG4gICAgICAgIGlmIChmaXJzdExpKSB7XG4gICAgICAgICAgICBmaXJzdExpLmZvY3VzKCk7XG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgIGNvbnN0IHJlc3R5bGUgPSAoKSA9PiBvblJlc3R5bGUodWwpO1xuXG4gICAgY29uc3QgY2xvc2VJZk91dHNpZGVUYXJnZXQgPSAoZSkgPT4ge1xuICAgICAgICBpZiAoZS50YXJnZXQgPT09IGlucHV0IHx8IGUudGFyZ2V0ID09PSB1bCB8fCB1bC5jb250YWlucyhlLnRhcmdldCkpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGNsb3NlQXV0b2NvbXBsZXRlTGlzdEVsKCk7XG4gICAgfTtcblxuICAgIGNvbnN0IHNjQ29udGFpbmVyID0gaW5wdXQuY2xvc2VzdCgnLnRhYmxlLXJlc3BvbnNpdmUnKTtcblxuICAgIHZhciB0ZXh0QXJlYSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdidWdub3RlX3RleHQnKVxuXG4gICAgdGV4dEFyZWEuYWRkRXZlbnRMaXN0ZW5lcignaW5wdXQnLCByZXN0eWxlKTtcbiAgICB0ZXh0QXJlYS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIHJlc3R5bGUpO1xuICAgIHRleHRBcmVhLmFkZEV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIHJlc3R5bGUpO1xuXG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Njcm9sbCcsIHJlc3R5bGUpO1xuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdyZXNpemUnLCByZXN0eWxlKTtcbiAgICBpbnB1dC5hZGRFdmVudExpc3RlbmVyKCdzY3JvbGwnLCByZXN0eWxlKTtcbiAgICBpZiAoc2NDb250YWluZXIpIHtcbiAgICAgICAgc2NDb250YWluZXIuYWRkRXZlbnRMaXN0ZW5lcignc2Nyb2xsJywgcmVzdHlsZSk7XG4gICAgfVxuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGNsb3NlSWZPdXRzaWRlVGFyZ2V0KTtcbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignZm9jdXNpbicsIGNsb3NlSWZPdXRzaWRlVGFyZ2V0KTtcblxuICAgIGRlc3Ryb3lMaXN0Rm4gPSAoKSA9PiB7XG5cbiAgICAgICAgdGV4dEFyZWEucmVtb3ZlRXZlbnRMaXN0ZW5lcignaW5wdXQnLCByZXN0eWxlKTtcbiAgICAgICAgdGV4dEFyZWEucmVtb3ZlRXZlbnRMaXN0ZW5lcignY2xpY2snLCByZXN0eWxlKTtcbiAgICAgICAgdGV4dEFyZWEucmVtb3ZlRXZlbnRMaXN0ZW5lcigncmVzaXplJywgcmVzdHlsZSk7XG5cbiAgICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3Njcm9sbCcsIHJlc3R5bGUpO1xuICAgICAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcigncmVzaXplJywgcmVzdHlsZSk7XG4gICAgICAgIGlucHV0LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3Njcm9sbCcsIHJlc3R5bGUpO1xuICAgICAgICBpZiAoc2NDb250YWluZXIpIHtcbiAgICAgICAgICAgIHNjQ29udGFpbmVyLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3Njcm9sbCcsIHJlc3R5bGUpO1xuICAgICAgICB9XG4gICAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCdjbGljaycsIGNsb3NlSWZPdXRzaWRlVGFyZ2V0KTtcbiAgICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2ZvY3VzaW4nLCBjbG9zZUlmT3V0c2lkZVRhcmdldCk7XG4gICAgfTtcblxuICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQodWwpO1xuXG4gICAgcmVzdHlsZSgpO1xufVxuXG5mdW5jdGlvbiBjbG9zZUF1dG9jb21wbGV0ZUxpc3RFbCgpIHtcbiAgICBjb25zdCBlbCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNpbWF0aWNBdXRvY29tcGxldGVXaWRnZXQnKTtcbiAgICBpZiAoZWwpIHtcbiAgICAgICAgZGVzdHJveUxpc3RGbigpO1xuICAgICAgICBlbC5yZW1vdmUoKTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIGZvY3VzQXV0b2NvbXBsZXRlTGlzdCgpIHtcbiAgICBjb25zdCBlbCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNpbWF0aWNBdXRvY29tcGxldGVXaWRnZXQnKTtcbiAgICBpZiAoIWVsKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBlbC5mb2N1cygpO1xufVxuXG5mdW5jdGlvbiBhdXRvY29tcGxldGUoZWwpIHtcbiAgICBsZXQgYXV0b2NvbXBsZXRpbmcgPSBmYWxzZTtcbiAgICBsZXQgc3RhcnRTZWwgPSAwO1xuICAgIGxldCBhY3RpdmVDb21wbGV0aW9ucyA9IG51bGw7XG5cbiAgICBmdW5jdGlvbiBzdG9wQXV0b2NvbXBsZXRlKCkge1xuICAgICAgICBpZiAoIWF1dG9jb21wbGV0aW5nKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBhdXRvY29tcGxldGluZyA9IGZhbHNlO1xuICAgICAgICBjbG9zZUF1dG9jb21wbGV0ZUxpc3RFbCgpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdldFNlbGVjdGlvbkxlbmd0aCgpIHtcbiAgICAgICAgcmV0dXJuIGVsLnNlbGVjdGlvblN0YXJ0IC0gc3RhcnRTZWw7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2V0U2VsZWN0aW9uKCkge1xuICAgICAgICBjb25zdCBsZW4gPSBnZXRTZWxlY3Rpb25MZW5ndGgoKTtcbiAgICAgICAgY29uc3Qgc2VsZWN0aW9uID0gZWwudmFsdWUuc3Vic3RyKHN0YXJ0U2VsLCBsZW4pO1xuXG4gICAgICAgIGlmIChzZWxlY3Rpb24ubGVuZ3RoID09PSAwIHx8IHNlbGVjdGlvbi5tYXRjaCgvW1xcbiBdLykgIT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gc2VsZWN0aW9uO1xuICAgIH1cblxuICAgIGNvbnN0IGhhbmRsZUNoYW5nZSA9ICgpID0+IHtcbiAgICAgICAgaWYgKGVsLnNlbGVjdGlvblN0YXJ0ID09PSAwKSB7XG4gICAgICAgICAgICBzdG9wQXV0b2NvbXBsZXRlKCk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoZWwudmFsdWVbZWwuc2VsZWN0aW9uU3RhcnQgLSAxXSA9PT0gJ0AnKSB7XG4gICAgICAgICAgICBhdXRvY29tcGxldGluZyA9IHRydWU7XG4gICAgICAgICAgICBzdGFydFNlbCA9IGVsLnNlbGVjdGlvblN0YXJ0O1xuICAgICAgICAgICAgYWN0aXZlQ29tcGxldGlvbnMgPSBudWxsO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGF1dG9jb21wbGV0aW5nKSB7XG4gICAgICAgICAgICBjb25zdCB2ID0gZ2V0U2VsZWN0aW9uKCk7XG4gICAgICAgICAgICBpZiAodiA9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgc3RvcEF1dG9jb21wbGV0ZSgpO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgY29uc3QgcmVjZWl2ZUNvbXBsZXRpb25zID0gKCkgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IGNvbXBsZXRpb25zID0gY2FjaGUuZ2V0QmVzdE1hdGNoKFxuICAgICAgICAgICAgICAgICAgICByZXN1bHRDYWNoZSxcbiAgICAgICAgICAgICAgICAgICAgZ2V0U2VsZWN0aW9uKClcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgICAgICAgY29tcGxldGlvbnMgPT0gbnVsbCB8fFxuICAgICAgICAgICAgICAgICAgICBjb21wbGV0aW9ucy5sZW5ndGggPT09IDAgfHxcbiAgICAgICAgICAgICAgICAgICAgIWF1dG9jb21wbGV0aW5nXG4gICAgICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgICAgIGNsb3NlQXV0b2NvbXBsZXRlTGlzdEVsKCk7XG4gICAgICAgICAgICAgICAgICAgIGFjdGl2ZUNvbXBsZXRpb25zID0gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmIChmbGF0QXJyYXlzRXF1YWwoYWN0aXZlQ29tcGxldGlvbnMsIGNvbXBsZXRpb25zKSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgY29uc3QgbGVuID0gZ2V0U2VsZWN0aW9uTGVuZ3RoKCk7XG4gICAgICAgICAgICAgICAgYWN0aXZlQ29tcGxldGlvbnMgPSBjb21wbGV0aW9ucztcblxuICAgICAgICAgICAgICAgIG9wZW5BdXRvY29tcGxldGVMaXN0RWwoe1xuICAgICAgICAgICAgICAgICAgICBjb21wbGV0aW9uczogY29tcGxldGlvbnMsXG4gICAgICAgICAgICAgICAgICAgIGlucHV0OiBlbCxcbiAgICAgICAgICAgICAgICAgICAgZm9jdXNJbnB1dDogKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgcmVxdWlyZWRTZWwgPSBzdGFydFNlbCArIGxlbjtcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsLmZvY3VzKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBlbC5zZXRTZWxlY3Rpb25SYW5nZShyZXF1aXJlZFNlbCwgcmVxdWlyZWRTZWwpO1xuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBvblNlbGVjdDogKHt2YWx9KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWF1dG9jb21wbGV0aW5nKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCByZXF1aXJlZFNlbCA9IHN0YXJ0U2VsICsgbGVuO1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgcmVwbGFjZVRvID0gc3RhcnRTZWwgKyBnZXRTZWxlY3Rpb24oKS5sZW5ndGg7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGVsLmZvY3VzKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBlbC5zZXRSYW5nZVRleHQoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsLnN1YnN0cihsZW4pICsgJyAnLCAvLyAnICcgd2hpdGVzcGFjZSBhZnRlciBpbnNlcnRlZCBAdXNlclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlcXVpcmVkU2VsLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlcGxhY2VUbyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnZW5kJ1xuICAgICAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGF1dG9jb21wbGV0aW5nID0gZmFsc2VcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgb25SZXN0eWxlOiAobGlzdEVsKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBsaXN0UG9zID0gZWwuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBlbFN0eWxlcyA9IGdldENvbXB1dGVkU3R5bGUoZWwpO1xuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHdpZGdldElkID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2ltYXRpY0F1dG9jb21wbGV0ZVdpZGdldCcpXG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHRleHRIZWlnaHQgPSB1LnRleHRTaXplKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsU3R5bGVzLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsLnZhbHVlLnN1YnN0cigwLCBlbC5zZWxlY3Rpb25TdGFydClcbiAgICAgICAgICAgICAgICAgICAgICAgICkuaGVpZ2h0O1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBsaXN0RWwuc3R5bGUucG9zaXRpb24gPSAnZml4ZWQnO1xuICAgICAgICAgICAgICAgICAgICAgICAgbGlzdEVsLnN0eWxlLmxlZnQgPSBNYXRoLm1heCgwLCBsaXN0UG9zLngpICsgJ3B4JztcbiAgICAgICAgICAgICAgICAgICAgICAgIGxpc3RFbC5zdHlsZS50b3AgPVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxpc3RQb3MueSArIHRleHRIZWlnaHQgKyA1IC0gZWwuc2Nyb2xsVG9wICsgJ3B4JztcbiAgICAgICAgICAgICAgICAgICAgICAgIGxpc3RFbC5zdHlsZS53aWR0aCA9IGVsLmNsaWVudFdpZHRoICsgJ3B4JztcblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHdpZGdldElkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRleHRIZWlnaHQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3Qgd2lkZ2V0UG9zaXRpb24gPSB3aWRnZXRJZC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgcG9zRGlmID0gbGlzdFBvcy55IC0gd2lkZ2V0UG9zaXRpb24ueSArIHRleHRIZWlnaHRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHBvc0RpZiA+IC01ICkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGlzdEVsLnN0eWxlLnRvcCA9IGxpc3RQb3MueSArIHRleHRIZWlnaHQgKyAxMCAtIGVsLnNjcm9sbFRvcCArIHBvc0RpZiArICdweCc7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgaWYgKGNhY2hlLmhhcyhyZXN1bHRDYWNoZSwgdikpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVjZWl2ZUNvbXBsZXRpb25zKGNhY2hlLmdldChyZXN1bHRDYWNoZSwgdikpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBsZXQgaGFuZGxlcnNTZWxlY3QgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCdzZWxlY3RbbmFtZT1cImhhbmRsZXJfaWRcIl0nKTtcbiAgICAgICAgICAgIGxldCBjb21wbGV0aW9ucyA9IFtdO1xuXG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGhhbmRsZXJzU2VsZWN0Lmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgbGV0IG9wdGlvbnMgPSBoYW5kbGVyc1NlbGVjdFtpXS5vcHRpb25zO1xuICAgICAgICAgICAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgb3B0aW9ucy5sZW5ndGg7IGorKykge1xuICAgICAgICAgICAgICAgICAgICBjb21wbGV0aW9ucy5wdXNoKG9wdGlvbnNbal0udGV4dENvbnRlbnQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgY29tcGxldGlvbnMgPSBjb21wbGV0aW9ucy5maWx0ZXIoZnVuY3Rpb24gKGhhbmRsZXIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaGFuZGxlciAhPT0gXCJbTXlzZWxmXVwiICYmIGhhbmRsZXIgIT09IFwiW1JlcG9ydGVyXVwiO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIGZpbHRlclVzZXJzQnlTdHJpbmcodiwgY29tcGxldGlvbnMpXG5cblxuICAgICAgICAgICAgZnVuY3Rpb24gZmlsdGVyVXNlcnNCeVN0cmluZyh2LCB1c2Vycykge1xuXG4gICAgICAgICAgICAgICAgbGV0IGZpbHRlcmVkVXNlcnMgPSB1c2Vycy5maWx0ZXIoZnVuY3Rpb24gKHVzZXIpIHtcblxuICAgICAgICAgICAgICAgICAgICBpZiAodXNlci5yZXBsYWNlKC8uKlxccy8sIFwiXCIpLmluZGV4T2YodikgPT09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB1c2VyLmluY2x1ZGVzKHYpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICByZXN1bHRDYWNoZSA9IGNhY2hlLnNldChyZXN1bHRDYWNoZSwgdiwgZmlsdGVyZWRVc2Vycyk7XG4gICAgICAgICAgICAgICAgcmVjZWl2ZUNvbXBsZXRpb25zKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgZWwuYWRkRXZlbnRMaXN0ZW5lcigna2V5ZG93bicsIChlKSA9PiB7XG4gICAgICAgIGlmICghYXV0b2NvbXBsZXRpbmcpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHN3aXRjaCAoZS5jb2RlKSB7XG4gICAgICAgICAgICBjYXNlICdBcnJvd0Rvd24nOlxuICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTsgLy8gcHJldmVudCBzY3JvbGxpbmdcbiAgICAgICAgICAgICAgICBmb2N1c0F1dG9jb21wbGV0ZUxpc3QoKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ0Fycm93VXAnOlxuICAgICAgICAgICAgICAgIHN0b3BBdXRvY29tcGxldGUoKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ0Fycm93TGVmdCc6XG4gICAgICAgICAgICBjYXNlICdBcnJvd1JpZ2h0JzpcbiAgICAgICAgICAgICAgICAvLyBtYWtlIHN1cmUgdGhhdCBlbGVtZW50IGhhcyBjb3JyZWN0IHNlbGVjdGlvblxuICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4gaGFuZGxlQ2hhbmdlKCksIDApO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSdUYWInOiB7XG4gICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgICAgIGlmICghYXV0b2NvbXBsZXRpbmcpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBmb2N1c0F1dG9jb21wbGV0ZUxpc3QoKTtcblxuICAgICAgICAgICAgICAgIGNvbnN0IGxlbiA9IGdldFNlbGVjdGlvbkxlbmd0aCgpO1xuICAgICAgICAgICAgICAgIGNvbnN0IGZpcnN0Q2hpbGQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjaW1hdGljQXV0b2NvbXBsZXRlV2lkZ2V0JykuZmlyc3RDaGlsZDtcblxuICAgICAgICAgICAgICAgIGlmIChmaXJzdENoaWxkKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIFJlbW92ZSByb2xlIGljb25cbiAgICAgICAgICAgICAgICAgICAgY29uc3QgdGV4dFZhbHVlID0gZmlyc3RDaGlsZC50ZXh0Q29udGVudC5yZXBsYWNlKC8uKlxccy8sIFwiXCIpO1xuICAgICAgICAgICAgICAgICAgICA7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHJlcXVpcmVkU2VsID0gc3RhcnRTZWwgKyBsZW47XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHJlcGxhY2VUbyA9IHN0YXJ0U2VsICsgZ2V0U2VsZWN0aW9uKCkubGVuZ3RoO1xuXG4gICAgICAgICAgICAgICAgICAgIGVsLmZvY3VzKCk7XG4gICAgICAgICAgICAgICAgICAgIGVsLnNldFJhbmdlVGV4dChcbiAgICAgICAgICAgICAgICAgICAgICAgIHRleHRWYWx1ZS5zdWJzdHIobGVuKSArICcgJywgLy8gJyAnIHdoaXRlc3BhY2UgYWZ0ZXIgaW5zZXJ0ZWQgQHVzZXJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlcXVpcmVkU2VsLFxuICAgICAgICAgICAgICAgICAgICAgICAgcmVwbGFjZVRvLFxuICAgICAgICAgICAgICAgICAgICAgICAgJ2VuZCdcbiAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICAgICAgY2xvc2VBdXRvY29tcGxldGVMaXN0RWwoKTtcblxuICAgICAgICAgICAgICAgICAgICBhdXRvY29tcGxldGluZyA9IGZhbHNlXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGlmIChlLmNvZGUgPT09ICdBcnJvd0Rvd24nKSB7XG4gICAgICAgICAgICBmb2N1c0F1dG9jb21wbGV0ZUxpc3QoKTtcbiAgICAgICAgfVxuICAgIH0pO1xuICAgIGVsLmFkZEV2ZW50TGlzdGVuZXIoJ2lucHV0JywgKGUpID0+IHtcbiAgICAgICAgaGFuZGxlQ2hhbmdlKCk7XG4gICAgfSk7XG59XG5cblxuZG9jdW1lbnRcbiAgICAucXVlcnlTZWxlY3RvckFsbChcbiAgICAgICAgJyNidWdub3RlX3RleHQsICNkZXNjcmlwdGlvbiwgI3N0ZXBzX3RvX3JlcHJvZHVjZSwgI2FkZGl0aW9uYWxfaW5mbywgI3N1bW1hcnksICNhZGRpdGlvbmFsX2luZm9ybWF0aW9uJ1xuICAgIClcbiAgICAuZm9yRWFjaCgoZWwpID0+IHtcbiAgICAgICAgYXV0b2NvbXBsZXRlKGVsKTtcbiAgICB9KTsiLCIvKipcbiAqIEBwYXJhbSB7Q1NTU3R5bGVEZWNsYXJhdGlvbn0gY29tcHV0ZWRTdHlsZVxuICogQHBhcmFtIHtzdHJpbmd9IHRleHRcbiAqXG4gKiBAcmV0dXJucyB7e3dpZHRoOiBudW1iZXIsIGhlaWdodDogbnVtYmVyfX1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHRleHRTaXplKGNvbXB1dGVkU3R5bGUsIHRleHQpIHtcbiAgICBjb25zdCBzcGFuID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3BhbicpO1xuICAgIHNwYW4udGV4dENvbnRlbnQgPSB0ZXh0O1xuXG4gICAgY29uc3QgZGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgZGl2LmFwcGVuZENoaWxkKHNwYW4pO1xuICAgIEFycmF5LmZyb20oY29tcHV0ZWRTdHlsZSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgIGRpdi5zdHlsZS5zZXRQcm9wZXJ0eShcbiAgICAgICAgICAgIGtleSxcbiAgICAgICAgICAgIGNvbXB1dGVkU3R5bGUuZ2V0UHJvcGVydHlWYWx1ZShrZXkpLFxuICAgICAgICAgICAgY29tcHV0ZWRTdHlsZS5nZXRQcm9wZXJ0eVByaW9yaXR5KGtleSlcbiAgICAgICAgKTtcbiAgICB9KTtcbiAgICBkaXYuc3R5bGUudmlzaWJpbGl0eSA9ICdoaWRkZW4nO1xuICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoZGl2KTtcblxuICAgIGNvbnN0IGRhdGEgPSB7d2lkdGg6IHNwYW4ub2Zmc2V0V2lkdGgsIGhlaWdodDogc3Bhbi5vZmZzZXRIZWlnaHR9O1xuXG4gICAgZGl2LnJlbW92ZSgpO1xuXG4gICAgcmV0dXJuIGRhdGE7XG59XG4iXSwic291cmNlUm9vdCI6IiJ9