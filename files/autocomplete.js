!function(e){var t={};function n(o){if(t[o])return t[o].exports;var r=t[o]={i:o,l:!1,exports:{}};return e[o].call(r.exports,r,r.exports,n),r.l=!0,r.exports}n.m=e,n.c=t,n.d=function(e,t,o){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:o})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var o=Object.create(null);if(n.r(o),Object.defineProperty(o,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var r in e)n.d(o,r,function(t){return e[t]}.bind(null,r));return o},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=0)}([function(e,t,n){"use strict";function o(e,t){return e[t]}n.r(t);let r={};const i=function(){const e=document.querySelector("[data-imatic-autocomplete-url]");if(null===e)return null;return e.dataset.imaticAutocompleteUrl}();let c;function l(){const e=document.querySelector("#imaticAutocompleteWidget");e&&(c(),e.remove())}function u(){const e=document.querySelector("#imaticAutocompleteWidget");e&&e.focus()}function s(e){let t=!1,n=0,s=null;function d(){t&&(t=!1,l())}function a(){return e.selectionStart-n}function f(){const t=a(),o=e.value.substr(n,t);return 0===o.length||null!=o.match(/[\n ]/)?null:o}const p=()=>{if(0!==e.selectionStart){if("@"===e.value[e.selectionStart-1])return t=!0,n=e.selectionStart,void(s=null);if(t){const u=f();if(null==u)return void d();const p=()=>{const i=function(e,t){for(let n=t.length;n>0;n--){const r=o(e,t.substr(0,n));if(null!=r)return r}}(r,f());if(null==i||0===i.length||!t)return l(),void(s=null);if(function(e,t){if(null==e||null==t)return null==e&&null==t;if(e.length!==t.length)return!1;for(let n=0;n<e.length;n++)if(e[n]!==t[n])return!1;return!0}(s,i))return;const u=a();s=i,function({completions:e,onSelect:t,focusInput:n,onRestyle:o,input:r}){l();let i=0;const u=e.map(e=>{const t=document.createTextNode(e),n=document.createElement("li");return n.setAttribute("tabindex",-1),n.appendChild(t),n}),s=document.createElement("ul");s.className="imatic-autocomplete",s.setAttribute("id","imaticAutocompleteWidget"),s.setAttribute("tabindex",-1),u.forEach(e=>s.appendChild(e));const d=new Set(["ArrowDown","ArrowUp","Enter"]);s.addEventListener("keydown",o=>{if(d.has(o.code))switch(o.preventDefault(),o.code){case"ArrowUp":{const e=s.querySelector(`li:nth-child(${i})`);e?(i--,e.focus()):n();break}case"ArrowDown":{const e=s.querySelector(`li:nth-child(${i+2})`);e&&(i++,e.focus())}break;case"Enter":t&&t({val:e[i]}),l()}}),s.addEventListener("click",e=>{var n=$(e.target).text();t({val:n}),l()}),s.addEventListener("focus",e=>{const t=s.querySelector("li");i=0,t&&t.focus()});const a=()=>o(s),f=e=>{e.target===r||e.target===s||s.contains(e.target)||l()},p=r.closest(".table-responsive");window.addEventListener("touchend",a),r.addEventListener("touchend",a),window.addEventListener("scroll",a),window.addEventListener("resize",a),r.addEventListener("scroll",a),p&&p.addEventListener("scroll",a),window.addEventListener("click",f),window.addEventListener("focusin",f),c=()=>{window.removeEventListener("touchend",a),window.removeEventListener("scroll",a),window.removeEventListener("resize",a),r.removeEventListener("scroll",a),p&&p.removeEventListener("scroll",a),window.removeEventListener("click",f),window.removeEventListener("focusin",f)},document.body.appendChild(s),a()}({completions:i,input:e,focusInput:()=>{const t=n+u;e.focus(),e.setSelectionRange(t,t)},onSelect:({val:o})=>{if(!t)return;const r=n+u;e.focus(),e.setRangeText(o.substr(u),r,r,"end")},onRestyle:t=>{const n=e.getBoundingClientRect(),o=function(e,t){const n=document.createElement("span");n.textContent=t;const o=document.createElement("div");o.appendChild(n),Array.from(e).forEach((function(t){o.style.setProperty(t,e.getPropertyValue(t),e.getPropertyPriority(t))})),o.style.visibility="hidden",document.body.appendChild(o);const r={width:n.offsetWidth,height:n.offsetHeight};return o.remove(),r}(getComputedStyle(e),e.value.substr(0,e.selectionStart)).height;t.style.position="fixed",t.style.left=Math.max(0,n.x)+"px",t.style.top=n.y+o+5-e.scrollTop+"px",t.style.width=e.clientWidth+"px"}})};if(null!=o(r,u))return p(o(r,u));fetch(function(e){const t=new URL(i,location.href);return t.searchParams.append("search",e),t}(u)).then(e=>e.json()).then(e=>{r=function(e,t,n){return Object.assign({},e,{[t]:n})}(r,u,e),p()})}}else d()};e.addEventListener("keydown",e=>{if(t){switch(e.code){case"ArrowDown":e.preventDefault(),u();break;case"ArrowUp":d();break;case"ArrowLeft":case"ArrowRight":setTimeout(()=>p(),0)}"ArrowDown"===e.code&&u()}}),e.addEventListener("input",e=>{p()})}null!=i&&document.querySelectorAll("#bugnote_text, #description, #steps_to_reproduce, #additional_info, #summary, #additional_information").forEach(e=>{s(e)})}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,