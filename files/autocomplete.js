!function(e){var t={};function n(o){if(t[o])return t[o].exports;var r=t[o]={i:o,l:!1,exports:{}};return e[o].call(r.exports,r,r.exports,n),r.l=!0,r.exports}n.m=e,n.c=t,n.d=function(e,t,o){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:o})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var o=Object.create(null);if(n.r(o),Object.defineProperty(o,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var r in e)n.d(o,r,function(t){return e[t]}.bind(null,r));return o},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=0)}([function(e,t,n){"use strict";function o(e,t){return e[t]}n.r(t);let r={};const i=function(){const e=document.querySelector("[data-imatic-autocomplete-url]");if(null===e)return null;return e.dataset.imaticAutocompleteUrl}();let c;function l(){const e=document.querySelector("#imaticAutocompleteWidget");e&&(c(),e.remove())}function u(){const e=document.querySelector("#imaticAutocompleteWidget");e&&e.focus()}function s(e){let t=!1,n=0,s=null;function a(){t&&(t=!1,l())}function d(){return e.selectionStart-n}function f(){const t=d(),o=e.value.substr(n,t);return 0===o.length||null!=o.match(/[\n ]/)?null:o}const p=()=>{if(0!==e.selectionStart){if("@"===e.value[e.selectionStart-1])return t=!0,n=e.selectionStart,void(s=null);if(t){const u=f();if(null==u)return void a();const p=()=>{const i=function(e,t){for(let n=t.length;n>0;n--){const r=o(e,t.substr(0,n));if(null!=r)return r}}(r,f());if(null==i||0===i.length||!t)return l(),void(s=null);if(function(e,t){if(null==e||null==t)return null==e&&null==t;if(e.length!==t.length)return!1;for(let n=0;n<e.length;n++)if(e[n]!==t[n])return!1;return!0}(s,i))return;const u=d();s=i,function({completions:e,onSelect:t,focusInput:n,onRestyle:o,input:r}){l();let i=0;const u=e.map(e=>{const t=document.createTextNode(e),n=document.createElement("li");return n.setAttribute("tabindex",-1),n.appendChild(t),n}),s=document.createElement("ul");s.className="imatic-autocomplete",s.setAttribute("id","imaticAutocompleteWidget"),s.setAttribute("tabindex",-1),u.forEach(e=>s.appendChild(e));const a=new Set(["ArrowDown","ArrowUp","Enter"]);s.addEventListener("keydown",o=>{if(a.has(o.code))switch(o.preventDefault(),o.code){case"ArrowUp":{const e=s.querySelector(`li:nth-child(${i})`);e?(i--,e.focus()):n();break}case"ArrowDown":{const e=s.querySelector(`li:nth-child(${i+2})`);e&&(i++,e.focus())}break;case"Enter":t&&t({val:e[i]}),l()}}),s.addEventListener("focus",e=>{const t=s.querySelector("li");i=0,t&&t.focus()});const d=()=>o(s),f=e=>{e.target===r||e.target===s||s.contains(e.target)||l()},p=r.closest(".table-responsive");window.addEventListener("scroll",d),window.addEventListener("resize",d),r.addEventListener("scroll",d),p&&p.addEventListener("scroll",d),window.addEventListener("click",f),window.addEventListener("focusin",f),c=()=>{window.removeEventListener("scroll",d),window.removeEventListener("resize",d),r.removeEventListener("scroll",d),p&&p.removeEventListener("scroll",d),window.removeEventListener("click",f),window.removeEventListener("focusin",f)},document.body.appendChild(s),d()}({completions:i,input:e,focusInput:()=>{const t=n+u;e.focus(),e.setSelectionRange(t,t)},onSelect:({val:o})=>{if(!t)return;const r=n+u;e.focus(),e.setRangeText(o.substr(u),r,r,"end")},onRestyle:t=>{const n=e.getBoundingClientRect(),o=function(e,t){const n=document.createElement("span");n.textContent=t;const o=document.createElement("div");o.appendChild(n),Array.from(e).forEach((function(t){o.style.setProperty(t,e.getPropertyValue(t),e.getPropertyPriority(t))})),o.style.visibility="hidden",document.body.appendChild(o);const r={width:n.offsetWidth,height:n.offsetHeight};return o.remove(),r}(getComputedStyle(e),e.value.substr(0,e.selectionStart)).height;t.style.position="fixed",t.style.left=Math.max(0,n.x)+"px",t.style.top=n.y+o+5-e.scrollTop+"px",t.style.width=e.clientWidth+"px"}})};if(null!=o(r,u))return p(o(r,u));const m=new URLSearchParams(window.location.search).get("id"),v=new FormData;v.append("issue_id",m),fetch(function(e){const t=new URL(i,location.href);return t.searchParams.append("search",e),t}(u),{method:"POST",body:v}).then(e=>e.json()).then(e=>{r=function(e,t,n){return Object.assign({},e,{[t]:n})}(r,u,e),p()})}}else a()};e.addEventListener("keydown",e=>{if(t){switch(e.code){case"ArrowDown":e.preventDefault(),u();break;case"ArrowUp":a();break;case"ArrowLeft":case"ArrowRight":setTimeout(()=>p(),0)}"ArrowDown"===e.code&&u()}}),e.addEventListener("input",e=>{p()})}null!=i&&document.querySelectorAll("#bugnote_text, #description, #steps_to_reproduce, #additional_info, #summary, #additional_information").forEach(e=>{s(e)})}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vanMvY2FjaGUuanMiLCJ3ZWJwYWNrOi8vLy4vanMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vanMvdXRpbHMuanMiXSwibmFtZXMiOlsiaW5zdGFsbGVkTW9kdWxlcyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJtb2R1bGVJZCIsImV4cG9ydHMiLCJtb2R1bGUiLCJpIiwibCIsIm1vZHVsZXMiLCJjYWxsIiwibSIsImMiLCJkIiwibmFtZSIsImdldHRlciIsIm8iLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJnZXQiLCJyIiwiU3ltYm9sIiwidG9TdHJpbmdUYWciLCJ2YWx1ZSIsInQiLCJtb2RlIiwiX19lc01vZHVsZSIsIm5zIiwiY3JlYXRlIiwia2V5IiwiYmluZCIsIm4iLCJvYmplY3QiLCJwcm9wZXJ0eSIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwicCIsInMiLCJjYWNoZSIsInRlcm0iLCJyZXN1bHRDYWNoZSIsIl9hdXRvY29tcGxldGVVcmwiLCJlbCIsImRvY3VtZW50IiwicXVlcnlTZWxlY3RvciIsImRhdGFzZXQiLCJpbWF0aWNBdXRvY29tcGxldGVVcmwiLCJhdXRvY29tcGxldGVVcmwiLCJkZXN0cm95TGlzdEZuIiwiY2xvc2VBdXRvY29tcGxldGVMaXN0RWwiLCJyZW1vdmUiLCJmb2N1c0F1dG9jb21wbGV0ZUxpc3QiLCJmb2N1cyIsImF1dG9jb21wbGV0ZSIsImF1dG9jb21wbGV0aW5nIiwic3RhcnRTZWwiLCJhY3RpdmVDb21wbGV0aW9ucyIsInN0b3BBdXRvY29tcGxldGUiLCJnZXRTZWxlY3Rpb25MZW5ndGgiLCJzZWxlY3Rpb25TdGFydCIsImdldFNlbGVjdGlvbiIsImxlbiIsInNlbGVjdGlvbiIsInN1YnN0ciIsImxlbmd0aCIsIm1hdGNoIiwiaGFuZGxlQ2hhbmdlIiwidiIsInJlY2VpdmVDb21wbGV0aW9ucyIsImNvbXBsZXRpb25zIiwicmVzIiwidjEiLCJ2MiIsImZsYXRBcnJheXNFcXVhbCIsIm9uU2VsZWN0IiwiZm9jdXNJbnB1dCIsIm9uUmVzdHlsZSIsImlucHV0IiwiZm9jdXNlZCIsImNvbXBsZXRpb25FbHMiLCJtYXAiLCJ0ZXh0IiwiY3JlYXRlVGV4dE5vZGUiLCJsaSIsImNyZWF0ZUVsZW1lbnQiLCJzZXRBdHRyaWJ1dGUiLCJhcHBlbmRDaGlsZCIsInVsIiwiY2xhc3NOYW1lIiwiZm9yRWFjaCIsImNvbnRyb2xLZXlzIiwiU2V0IiwiYWRkRXZlbnRMaXN0ZW5lciIsImUiLCJoYXMiLCJjb2RlIiwicHJldmVudERlZmF1bHQiLCJuZXdBY3RpdmUiLCJ2YWwiLCJmaXJzdExpIiwicmVzdHlsZSIsImNsb3NlSWZPdXRzaWRlVGFyZ2V0IiwidGFyZ2V0IiwiY29udGFpbnMiLCJzY0NvbnRhaW5lciIsImNsb3Nlc3QiLCJ3aW5kb3ciLCJyZW1vdmVFdmVudExpc3RlbmVyIiwiYm9keSIsIm9wZW5BdXRvY29tcGxldGVMaXN0RWwiLCJyZXF1aXJlZFNlbCIsInNldFNlbGVjdGlvblJhbmdlIiwic2V0UmFuZ2VUZXh0IiwibGlzdEVsIiwibGlzdFBvcyIsImdldEJvdW5kaW5nQ2xpZW50UmVjdCIsInRleHRIZWlnaHQiLCJjb21wdXRlZFN0eWxlIiwic3BhbiIsInRleHRDb250ZW50IiwiZGl2IiwiQXJyYXkiLCJmcm9tIiwic3R5bGUiLCJzZXRQcm9wZXJ0eSIsImdldFByb3BlcnR5VmFsdWUiLCJnZXRQcm9wZXJ0eVByaW9yaXR5IiwidmlzaWJpbGl0eSIsImRhdGEiLCJ3aWR0aCIsIm9mZnNldFdpZHRoIiwiaGVpZ2h0Iiwib2Zmc2V0SGVpZ2h0IiwiZ2V0Q29tcHV0ZWRTdHlsZSIsInBvc2l0aW9uIiwibGVmdCIsIk1hdGgiLCJtYXgiLCJ4IiwidG9wIiwieSIsInNjcm9sbFRvcCIsImNsaWVudFdpZHRoIiwiaXNzdWVfaWQiLCJVUkxTZWFyY2hQYXJhbXMiLCJsb2NhdGlvbiIsInNlYXJjaCIsImZvcm1EYXRhIiwiRm9ybURhdGEiLCJhcHBlbmQiLCJmZXRjaCIsInVybCIsIlVSTCIsImhyZWYiLCJzZWFyY2hQYXJhbXMiLCJzZWFyY2hVcmwiLCJtZXRob2QiLCJ0aGVuIiwianNvbiIsImFzc2lnbiIsInNldFRpbWVvdXQiLCJxdWVyeVNlbGVjdG9yQWxsIl0sIm1hcHBpbmdzIjoiYUFDRSxJQUFJQSxFQUFtQixHQUd2QixTQUFTQyxFQUFvQkMsR0FHNUIsR0FBR0YsRUFBaUJFLEdBQ25CLE9BQU9GLEVBQWlCRSxHQUFVQyxRQUduQyxJQUFJQyxFQUFTSixFQUFpQkUsR0FBWSxDQUN6Q0csRUFBR0gsRUFDSEksR0FBRyxFQUNISCxRQUFTLElBVVYsT0FOQUksRUFBUUwsR0FBVU0sS0FBS0osRUFBT0QsUUFBU0MsRUFBUUEsRUFBT0QsUUFBU0YsR0FHL0RHLEVBQU9FLEdBQUksRUFHSkYsRUFBT0QsUUFLZkYsRUFBb0JRLEVBQUlGLEVBR3hCTixFQUFvQlMsRUFBSVYsRUFHeEJDLEVBQW9CVSxFQUFJLFNBQVNSLEVBQVNTLEVBQU1DLEdBQzNDWixFQUFvQmEsRUFBRVgsRUFBU1MsSUFDbENHLE9BQU9DLGVBQWViLEVBQVNTLEVBQU0sQ0FBRUssWUFBWSxFQUFNQyxJQUFLTCxLQUtoRVosRUFBb0JrQixFQUFJLFNBQVNoQixHQUNYLG9CQUFYaUIsUUFBMEJBLE9BQU9DLGFBQzFDTixPQUFPQyxlQUFlYixFQUFTaUIsT0FBT0MsWUFBYSxDQUFFQyxNQUFPLFdBRTdEUCxPQUFPQyxlQUFlYixFQUFTLGFBQWMsQ0FBRW1CLE9BQU8sS0FRdkRyQixFQUFvQnNCLEVBQUksU0FBU0QsRUFBT0UsR0FFdkMsR0FEVSxFQUFQQSxJQUFVRixFQUFRckIsRUFBb0JxQixJQUMvQixFQUFQRSxFQUFVLE9BQU9GLEVBQ3BCLEdBQVcsRUFBUEUsR0FBOEIsaUJBQVZGLEdBQXNCQSxHQUFTQSxFQUFNRyxXQUFZLE9BQU9ILEVBQ2hGLElBQUlJLEVBQUtYLE9BQU9ZLE9BQU8sTUFHdkIsR0FGQTFCLEVBQW9Ca0IsRUFBRU8s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SUN3UlgsQ0FBVWlCLEVBQWEyQixFQUFHRSxHQUN4Q0QsWUFsR1JYLEtBdUdSZixFQUFHa0QsaUJBQWlCLFVBQVlDLElBQzVCLEdBQUt2QyxFQUFMLENBSUEsT0FBUXVDLEVBQUVFLE1BQ04sSUFBSyxZQUNERixFQUFFRyxpQkFDRjdDLElBQ0EsTUFDSixJQUFLLFVBQ0RNLElBQ0EsTUFDSixJQUFLLFlBQ0wsSUFBSyxhQUVEdUcsV0FBVyxJQUFNOUYsSUFBZ0IsR0FHMUIsY0FBWDJCLEVBQUVFLE1BQ0Y1QyxPQUdSVCxFQUFHa0QsaUJBQWlCLFFBQVVDLElBQzFCM0IsTUFvQ2dCLE1BQXBCekIsR0FDQUUsU0FDS3NILGlCQUNHLHlHQUVIeEUsUUFBUy9DLElBQ05XLEVBQWFYIiwiZmlsZSI6ImF1dG9jb21wbGV0ZS5qcyIsInNvdXJjZXNDb250ZW50IjpbIiBcdC8vIFRoZSBtb2R1bGUgY2FjaGVcbiBcdHZhciBpbnN0YWxsZWRNb2R1bGVzID0ge307XG5cbiBcdC8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG4gXHRmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cbiBcdFx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG4gXHRcdGlmKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdKSB7XG4gXHRcdFx0cmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7XG4gXHRcdH1cbiBcdFx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcbiBcdFx0dmFyIG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdID0ge1xuIFx0XHRcdGk6IG1vZHVsZUlkLFxuIFx0XHRcdGw6IGZhbHNlLFxuIFx0XHRcdGV4cG9ydHM6IHt9XG4gXHRcdH07XG5cbiBcdFx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG4gXHRcdG1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG4gXHRcdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcbiBcdFx0bW9kdWxlLmwgPSB0cnVlO1xuXG4gXHRcdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG4gXHRcdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbiBcdH1cblxuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tID0gbW9kdWxlcztcblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGVcbiBcdF9fd2VicGFja19yZXF1aXJlX18uYyA9IGluc3RhbGxlZE1vZHVsZXM7XG5cbiBcdC8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb24gZm9yIGhhcm1vbnkgZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kID0gZnVuY3Rpb24oZXhwb3J0cywgbmFtZSwgZ2V0dGVyKSB7XG4gXHRcdGlmKCFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywgbmFtZSkpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgbmFtZSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGdldHRlciB9KTtcbiBcdFx0fVxuIFx0fTtcblxuIFx0Ly8gZGVmaW5lIF9fZXNNb2R1bGUgb24gZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yID0gZnVuY3Rpb24oZXhwb3J0cykge1xuIFx0XHRpZih0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wudG9TdHJpbmdUYWcpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcbiBcdFx0fVxuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuIFx0fTtcblxuIFx0Ly8gY3JlYXRlIGEgZmFrZSBuYW1lc3BhY2Ugb2JqZWN0XG4gXHQvLyBtb2RlICYgMTogdmFsdWUgaXMgYSBtb2R1bGUgaWQsIHJlcXVpcmUgaXRcbiBcdC8vIG1vZGUgJiAyOiBtZXJnZSBhbGwgcHJvcGVydGllcyBvZiB2YWx1ZSBpbnRvIHRoZSBuc1xuIFx0Ly8gbW9kZSAmIDQ6IHJldHVybiB2YWx1ZSB3aGVuIGFscmVhZHkgbnMgb2JqZWN0XG4gXHQvLyBtb2RlICYgOHwxOiBiZWhhdmUgbGlrZSByZXF1aXJlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnQgPSBmdW5jdGlvbih2YWx1ZSwgbW9kZSkge1xuIFx0XHRpZihtb2RlICYgMSkgdmFsdWUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKHZhbHVlKTtcbiBcdFx0aWYobW9kZSAmIDgpIHJldHVybiB2YWx1ZTtcbiBcdFx0aWYoKG1vZGUgJiA0KSAmJiB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnICYmIHZhbHVlICYmIHZhbHVlLl9fZXNNb2R1bGUpIHJldHVybiB2YWx1ZTtcbiBcdFx0dmFyIG5zID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yKG5zKTtcbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG5zLCAnZGVmYXVsdCcsIHsgZW51bWVyYWJsZTogdHJ1ZSwgdmFsdWU6IHZhbHVlIH0pO1xuIFx0XHRpZihtb2RlICYgMiAmJiB0eXBlb2YgdmFsdWUgIT0gJ3N0cmluZycpIGZvcih2YXIga2V5IGluIHZhbHVlKSBfX3dlYnBhY2tfcmVxdWlyZV9fLmQobnMsIGtleSwgZnVuY3Rpb24oa2V5KSB7IHJldHVybiB2YWx1ZVtrZXldOyB9LmJpbmQobnVsbCwga2V5KSk7XG4gXHRcdHJldHVybiBucztcbiBcdH07XG5cbiBcdC8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSBmdW5jdGlvbihtb2R1bGUpIHtcbiBcdFx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0RGVmYXVsdCgpIHsgcmV0dXJuIG1vZHVsZVsnZGVmYXVsdCddOyB9IDpcbiBcdFx0XHRmdW5jdGlvbiBnZXRNb2R1bGVFeHBvcnRzKCkgeyByZXR1cm4gbW9kdWxlOyB9O1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCAnYScsIGdldHRlcik7XG4gXHRcdHJldHVybiBnZXR0ZXI7XG4gXHR9O1xuXG4gXHQvLyBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGxcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubyA9IGZ1bmN0aW9uKG9iamVjdCwgcHJvcGVydHkpIHsgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIHByb3BlcnR5KTsgfTtcblxuIFx0Ly8gX193ZWJwYWNrX3B1YmxpY19wYXRoX19cbiBcdF9fd2VicGFja19yZXF1aXJlX18ucCA9IFwiXCI7XG5cblxuIFx0Ly8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4gXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXyhfX3dlYnBhY2tfcmVxdWlyZV9fLnMgPSAwKTtcbiIsImV4cG9ydCBmdW5jdGlvbiBjcmVhdGUoKSB7XG4gICAgcmV0dXJuIHt9O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gc2V0KGNhY2hlLCB0ZXJtLCB2YWx1ZSkge1xuICAgIHJldHVybiBPYmplY3QuYXNzaWduKHt9LCBjYWNoZSwge1t0ZXJtXTogdmFsdWV9KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldChjYWNoZSwgdGVybSkge1xuICAgIHJldHVybiBjYWNoZVt0ZXJtXTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGhhcyhjYWNoZSwgdGVybSkge1xuICAgIHJldHVybiBnZXQoY2FjaGUsIHRlcm0pICE9IG51bGw7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRCZXN0TWF0Y2goY2FjaGUsIHRlcm0pIHtcbiAgICBmb3IgKGxldCBpID0gdGVybS5sZW5ndGg7IGkgPiAwOyBpLS0pIHtcbiAgICAgICAgY29uc3QgcmVzID0gZ2V0KGNhY2hlLCB0ZXJtLnN1YnN0cigwLCBpKSk7XG4gICAgICAgIGlmIChyZXMgIT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuIHJlcztcbiAgICAgICAgfVxuICAgIH1cbn1cbiIsImltcG9ydCAqIGFzIHUgZnJvbSAnLi91dGlscyc7XG5pbXBvcnQgKiBhcyBjYWNoZSBmcm9tICcuL2NhY2hlJztcblxubGV0IHJlc3VsdENhY2hlID0gY2FjaGUuY3JlYXRlKCk7XG5jb25zdCBfYXV0b2NvbXBsZXRlVXJsID0gYXV0b2NvbXBsZXRlVXJsKCk7XG5jb25zdCBtYXhfbGVuID0gMTkxO1xubGV0IGRlc3Ryb3lMaXN0Rm47XG5cbmZ1bmN0aW9uIGZsYXRBcnJheXNFcXVhbCh2MSwgdjIpIHtcbiAgICBpZiAodjEgPT0gbnVsbCB8fCB2MiA9PSBudWxsKSB7XG4gICAgICAgIHJldHVybiB2MSA9PSBudWxsICYmIHYyID09IG51bGw7XG4gICAgfVxuXG4gICAgaWYgKHYxLmxlbmd0aCAhPT0gdjIubGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHYxLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGlmICh2MVtpXSAhPT0gdjJbaV0pIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB0cnVlO1xufVxuXG5mdW5jdGlvbiBvcGVuQXV0b2NvbXBsZXRlTGlzdEVsKHtcbiAgICBjb21wbGV0aW9ucyxcbiAgICBvblNlbGVjdCxcbiAgICBmb2N1c0lucHV0LFxuICAgIG9uUmVzdHlsZSxcbiAgICBpbnB1dCxcbn0pIHtcbiAgICBjbG9zZUF1dG9jb21wbGV0ZUxpc3RFbCgpO1xuXG4gICAgbGV0IGZvY3VzZWQgPSAwO1xuXG4gICAgY29uc3QgY29tcGxldGlvbkVscyA9IGNvbXBsZXRpb25zLm1hcCgodikgPT4ge1xuICAgICAgICBjb25zdCB0ZXh0ID0gZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUodik7XG5cbiAgICAgICAgY29uc3QgbGkgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdsaScpO1xuICAgICAgICBsaS5zZXRBdHRyaWJ1dGUoJ3RhYmluZGV4JywgLTEpO1xuICAgICAgICBsaS5hcHBlbmRDaGlsZCh0ZXh0KTtcblxuICAgICAgICByZXR1cm4gbGk7XG4gICAgfSk7XG5cbiAgICBjb25zdCB1bCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3VsJyk7XG4gICAgdWwuY2xhc3NOYW1lID0gJ2ltYXRpYy1hdXRvY29tcGxldGUnO1xuICAgIHVsLnNldEF0dHJpYnV0ZSgnaWQnLCAnaW1hdGljQXV0b2NvbXBsZXRlV2lkZ2V0Jyk7XG4gICAgdWwuc2V0QXR0cmlidXRlKCd0YWJpbmRleCcsIC0xKTtcbiAgICBjb21wbGV0aW9uRWxzLmZvckVhY2goKGVsKSA9PiB1bC5hcHBlbmRDaGlsZChlbCkpO1xuXG4gICAgY29uc3QgY29udHJvbEtleXMgPSBuZXcgU2V0KFsnQXJyb3dEb3duJywgJ0Fycm93VXAnLCAnRW50ZXInXSk7XG5cbiAgICB1bC5hZGRFdmVudExpc3RlbmVyKCdrZXlkb3duJywgKGUpID0+IHtcbiAgICAgICAgaWYgKCFjb250cm9sS2V5cy5oYXMoZS5jb2RlKSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpOyAvLyBwcmV2ZW50IHNjcm9sbGluZ1xuXG4gICAgICAgIHN3aXRjaCAoZS5jb2RlKSB7XG4gICAgICAgICAgICBjYXNlICdBcnJvd1VwJzoge1xuICAgICAgICAgICAgICAgIGNvbnN0IG5ld0FjdGl2ZSA9IHVsLnF1ZXJ5U2VsZWN0b3IoYGxpOm50aC1jaGlsZCgke2ZvY3VzZWR9KWApO1xuICAgICAgICAgICAgICAgIGlmIChuZXdBY3RpdmUpIHtcbiAgICAgICAgICAgICAgICAgICAgZm9jdXNlZC0tO1xuICAgICAgICAgICAgICAgICAgICBuZXdBY3RpdmUuZm9jdXMoKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBmb2N1c0lucHV0KCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2FzZSAnQXJyb3dEb3duJzpcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IG5ld0FjdGl2ZSA9IHVsLnF1ZXJ5U2VsZWN0b3IoXG4gICAgICAgICAgICAgICAgICAgICAgICBgbGk6bnRoLWNoaWxkKCR7Zm9jdXNlZCArIDJ9KWBcbiAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKG5ld0FjdGl2ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZm9jdXNlZCsrO1xuICAgICAgICAgICAgICAgICAgICAgICAgbmV3QWN0aXZlLmZvY3VzKCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdFbnRlcic6XG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBpZiAob25TZWxlY3QpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG9uU2VsZWN0KHt2YWw6IGNvbXBsZXRpb25zW2ZvY3VzZWRdfSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgY2xvc2VBdXRvY29tcGxldGVMaXN0RWwoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgIHVsLmFkZEV2ZW50TGlzdGVuZXIoJ2ZvY3VzJywgKGUpID0+IHtcbiAgICAgICAgY29uc3QgZmlyc3RMaSA9IHVsLnF1ZXJ5U2VsZWN0b3IoJ2xpJyk7XG4gICAgICAgIGZvY3VzZWQgPSAwO1xuICAgICAgICBpZiAoZmlyc3RMaSkge1xuICAgICAgICAgICAgZmlyc3RMaS5mb2N1cygpO1xuICAgICAgICB9XG4gICAgfSk7XG5cbiAgICBjb25zdCByZXN0eWxlID0gKCkgPT4gb25SZXN0eWxlKHVsKTtcblxuICAgIGNvbnN0IGNsb3NlSWZPdXRzaWRlVGFyZ2V0ID0gKGUpID0+IHtcbiAgICAgICAgaWYgKGUudGFyZ2V0ID09PSBpbnB1dCB8fCBlLnRhcmdldCA9PT0gdWwgfHwgdWwuY29udGFpbnMoZS50YXJnZXQpKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBjbG9zZUF1dG9jb21wbGV0ZUxpc3RFbCgpO1xuICAgIH07XG5cbiAgICBjb25zdCBzY0NvbnRhaW5lciA9IGlucHV0LmNsb3Nlc3QoJy50YWJsZS1yZXNwb25zaXZlJyk7XG5cbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignc2Nyb2xsJywgcmVzdHlsZSk7XG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIHJlc3R5bGUpO1xuICAgIGlucHV0LmFkZEV2ZW50TGlzdGVuZXIoJ3Njcm9sbCcsIHJlc3R5bGUpO1xuICAgIGlmIChzY0NvbnRhaW5lcikge1xuICAgICAgICBzY0NvbnRhaW5lci5hZGRFdmVudExpc3RlbmVyKCdzY3JvbGwnLCByZXN0eWxlKTtcbiAgICB9XG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgY2xvc2VJZk91dHNpZGVUYXJnZXQpO1xuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdmb2N1c2luJywgY2xvc2VJZk91dHNpZGVUYXJnZXQpO1xuXG4gICAgZGVzdHJveUxpc3RGbiA9ICgpID0+IHtcbiAgICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3Njcm9sbCcsIHJlc3R5bGUpO1xuICAgICAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcigncmVzaXplJywgcmVzdHlsZSk7XG4gICAgICAgIGlucHV0LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3Njcm9sbCcsIHJlc3R5bGUpO1xuICAgICAgICBpZiAoc2NDb250YWluZXIpIHtcbiAgICAgICAgICAgIHNjQ29udGFpbmVyLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3Njcm9sbCcsIHJlc3R5bGUpO1xuICAgICAgICB9XG4gICAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCdjbGljaycsIGNsb3NlSWZPdXRzaWRlVGFyZ2V0KTtcbiAgICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2ZvY3VzaW4nLCBjbG9zZUlmT3V0c2lkZVRhcmdldCk7XG4gICAgfTtcblxuICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQodWwpO1xuXG4gICAgcmVzdHlsZSgpO1xufVxuXG5mdW5jdGlvbiBjbG9zZUF1dG9jb21wbGV0ZUxpc3RFbCgpIHtcbiAgICBjb25zdCBlbCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNpbWF0aWNBdXRvY29tcGxldGVXaWRnZXQnKTtcbiAgICBpZiAoZWwpIHtcbiAgICAgICAgZGVzdHJveUxpc3RGbigpO1xuICAgICAgICBlbC5yZW1vdmUoKTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIGZvY3VzQXV0b2NvbXBsZXRlTGlzdCgpIHtcbiAgICBjb25zdCBlbCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNpbWF0aWNBdXRvY29tcGxldGVXaWRnZXQnKTtcbiAgICBpZiAoIWVsKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBlbC5mb2N1cygpO1xufVxuXG5mdW5jdGlvbiBhdXRvY29tcGxldGUoZWwpIHtcbiAgICBsZXQgYXV0b2NvbXBsZXRpbmcgPSBmYWxzZTtcbiAgICBsZXQgc3RhcnRTZWwgPSAwO1xuICAgIGxldCBhY3RpdmVDb21wbGV0aW9ucyA9IG51bGw7XG5cbiAgICBmdW5jdGlvbiBzdG9wQXV0b2NvbXBsZXRlKCkge1xuICAgICAgICBpZiAoIWF1dG9jb21wbGV0aW5nKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBhdXRvY29tcGxldGluZyA9IGZhbHNlO1xuICAgICAgICBjbG9zZUF1dG9jb21wbGV0ZUxpc3RFbCgpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdldFNlbGVjdGlvbkxlbmd0aCgpIHtcbiAgICAgICAgcmV0dXJuIGVsLnNlbGVjdGlvblN0YXJ0IC0gc3RhcnRTZWw7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2V0U2VsZWN0aW9uKCkge1xuICAgICAgICBjb25zdCBsZW4gPSBnZXRTZWxlY3Rpb25MZW5ndGgoKTtcbiAgICAgICAgY29uc3Qgc2VsZWN0aW9uID0gZWwudmFsdWUuc3Vic3RyKHN0YXJ0U2VsLCBsZW4pO1xuXG4gICAgICAgIGlmIChzZWxlY3Rpb24ubGVuZ3RoID09PSAwIHx8IHNlbGVjdGlvbi5tYXRjaCgvW1xcbiBdLykgIT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gc2VsZWN0aW9uO1xuICAgIH1cblxuICAgIGNvbnN0IGhhbmRsZUNoYW5nZSA9ICgpID0+IHtcbiAgICAgICAgaWYgKGVsLnNlbGVjdGlvblN0YXJ0ID09PSAwKSB7XG4gICAgICAgICAgICBzdG9wQXV0b2NvbXBsZXRlKCk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoZWwudmFsdWVbZWwuc2VsZWN0aW9uU3RhcnQgLSAxXSA9PT0gJ0AnKSB7XG4gICAgICAgICAgICBhdXRvY29tcGxldGluZyA9IHRydWU7XG4gICAgICAgICAgICBzdGFydFNlbCA9IGVsLnNlbGVjdGlvblN0YXJ0O1xuICAgICAgICAgICAgYWN0aXZlQ29tcGxldGlvbnMgPSBudWxsO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGF1dG9jb21wbGV0aW5nKSB7XG4gICAgICAgICAgICBjb25zdCB2ID0gZ2V0U2VsZWN0aW9uKCk7XG4gICAgICAgICAgICBpZiAodiA9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgc3RvcEF1dG9jb21wbGV0ZSgpO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgY29uc3QgcmVjZWl2ZUNvbXBsZXRpb25zID0gKCkgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IGNvbXBsZXRpb25zID0gY2FjaGUuZ2V0QmVzdE1hdGNoKFxuICAgICAgICAgICAgICAgICAgICByZXN1bHRDYWNoZSxcbiAgICAgICAgICAgICAgICAgICAgZ2V0U2VsZWN0aW9uKClcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgICAgICAgY29tcGxldGlvbnMgPT0gbnVsbCB8fFxuICAgICAgICAgICAgICAgICAgICBjb21wbGV0aW9ucy5sZW5ndGggPT09IDAgfHxcbiAgICAgICAgICAgICAgICAgICAgIWF1dG9jb21wbGV0aW5nXG4gICAgICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgICAgIGNsb3NlQXV0b2NvbXBsZXRlTGlzdEVsKCk7XG4gICAgICAgICAgICAgICAgICAgIGFjdGl2ZUNvbXBsZXRpb25zID0gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmIChmbGF0QXJyYXlzRXF1YWwoYWN0aXZlQ29tcGxldGlvbnMsIGNvbXBsZXRpb25zKSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgY29uc3QgbGVuID0gZ2V0U2VsZWN0aW9uTGVuZ3RoKCk7XG4gICAgICAgICAgICAgICAgYWN0aXZlQ29tcGxldGlvbnMgPSBjb21wbGV0aW9ucztcblxuICAgICAgICAgICAgICAgIG9wZW5BdXRvY29tcGxldGVMaXN0RWwoe1xuICAgICAgICAgICAgICAgICAgICBjb21wbGV0aW9uczogY29tcGxldGlvbnMsXG4gICAgICAgICAgICAgICAgICAgIGlucHV0OiBlbCxcbiAgICAgICAgICAgICAgICAgICAgZm9jdXNJbnB1dDogKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgcmVxdWlyZWRTZWwgPSBzdGFydFNlbCArIGxlbjtcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsLmZvY3VzKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBlbC5zZXRTZWxlY3Rpb25SYW5nZShyZXF1aXJlZFNlbCwgcmVxdWlyZWRTZWwpO1xuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBvblNlbGVjdDogKHt2YWx9KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWF1dG9jb21wbGV0aW5nKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCByZXF1aXJlZFNlbCA9IHN0YXJ0U2VsICsgbGVuO1xuICAgICAgICAgICAgICAgICAgICAgICAgZWwuZm9jdXMoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsLnNldFJhbmdlVGV4dChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWwuc3Vic3RyKGxlbiksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVxdWlyZWRTZWwsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVxdWlyZWRTZWwsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2VuZCdcbiAgICAgICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIG9uUmVzdHlsZTogKGxpc3RFbCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgbGlzdFBvcyA9IGVsLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgZWxTdHlsZXMgPSBnZXRDb21wdXRlZFN0eWxlKGVsKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgdGV4dEhlaWdodCA9IHUudGV4dFNpemUoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxTdHlsZXMsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZWwudmFsdWUuc3Vic3RyKDAsIGVsLnNlbGVjdGlvblN0YXJ0KVxuICAgICAgICAgICAgICAgICAgICAgICAgKS5oZWlnaHQ7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGxpc3RFbC5zdHlsZS5wb3NpdGlvbiA9ICdmaXhlZCc7XG4gICAgICAgICAgICAgICAgICAgICAgICBsaXN0RWwuc3R5bGUubGVmdCA9IE1hdGgubWF4KDAsIGxpc3RQb3MueCkgKyAncHgnO1xuICAgICAgICAgICAgICAgICAgICAgICAgbGlzdEVsLnN0eWxlLnRvcCA9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGlzdFBvcy55ICsgdGV4dEhlaWdodCArIDUgLSBlbC5zY3JvbGxUb3AgKyAncHgnO1xuICAgICAgICAgICAgICAgICAgICAgICAgbGlzdEVsLnN0eWxlLndpZHRoID0gZWwuY2xpZW50V2lkdGggKyAncHgnO1xuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgaWYgKGNhY2hlLmhhcyhyZXN1bHRDYWNoZSwgdikpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVjZWl2ZUNvbXBsZXRpb25zKGNhY2hlLmdldChyZXN1bHRDYWNoZSwgdikpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBHZXQgaXNzdWUgaWQgZnJvbSB1cmwgXG4gICAgICAgICAgICBjb25zdCB1cmxQYXJhbXMgPSBuZXcgVVJMU2VhcmNoUGFyYW1zKHdpbmRvdy5sb2NhdGlvbi5zZWFyY2gpXG4gICAgICAgICAgICBjb25zdCBpc3N1ZV9pZCA9IHVybFBhcmFtcy5nZXQoJ2lkJylcbiAgICAgICAgICAgIGNvbnN0IGZvcm1EYXRhID0gbmV3IEZvcm1EYXRhKClcbiAgICAgICAgICAgIGZvcm1EYXRhLmFwcGVuZCgnaXNzdWVfaWQnLCBpc3N1ZV9pZClcblxuICAgICAgICAgICAgXG4gICAgICAgICAgICBmZXRjaChzZWFyY2hVcmwodiksIHtcbiAgICAgICAgICAgICAgICAgICAgbWV0aG9kOiAnUE9TVCcsXG4gICAgICAgICAgICAgICAgICAgIGJvZHk6IGZvcm1EYXRhXG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAudGhlbigocmVzKSA9PiByZXMuanNvbigpKVxuICAgICAgICAgICAgICAgIC50aGVuKChjb21wbGV0aW9ucykgPT4ge1xuICAgICAgICAgICAgICAgICAgICByZXN1bHRDYWNoZSA9IGNhY2hlLnNldChyZXN1bHRDYWNoZSwgdiwgY29tcGxldGlvbnMpO1xuICAgICAgICAgICAgICAgICAgICByZWNlaXZlQ29tcGxldGlvbnMoKTtcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICB9XG4gICAgfTtcblxuICAgIGVsLmFkZEV2ZW50TGlzdGVuZXIoJ2tleWRvd24nLCAoZSkgPT4ge1xuICAgICAgICBpZiAoIWF1dG9jb21wbGV0aW5nKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBzd2l0Y2ggKGUuY29kZSkge1xuICAgICAgICAgICAgY2FzZSAnQXJyb3dEb3duJzpcbiAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7IC8vIHByZXZlbnQgc2Nyb2xsaW5nXG4gICAgICAgICAgICAgICAgZm9jdXNBdXRvY29tcGxldGVMaXN0KCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdBcnJvd1VwJzpcbiAgICAgICAgICAgICAgICBzdG9wQXV0b2NvbXBsZXRlKCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdBcnJvd0xlZnQnOlxuICAgICAgICAgICAgY2FzZSAnQXJyb3dSaWdodCc6XG4gICAgICAgICAgICAgICAgLy8gbWFrZSBzdXJlIHRoYXQgZWxlbWVudCBoYXMgY29ycmVjdCBzZWxlY3Rpb25cbiAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IGhhbmRsZUNoYW5nZSgpLCAwKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBpZiAoZS5jb2RlID09PSAnQXJyb3dEb3duJykge1xuICAgICAgICAgICAgZm9jdXNBdXRvY29tcGxldGVMaXN0KCk7XG4gICAgICAgIH1cbiAgICB9KTtcbiAgICBlbC5hZGRFdmVudExpc3RlbmVyKCdpbnB1dCcsIChlKSA9PiB7XG4gICAgICAgIGhhbmRsZUNoYW5nZSgpO1xuICAgIH0pO1xufVxuXG5mdW5jdGlvbiBhdXRvY29tcGxldGVVcmwoKSB7XG4gICAgY29uc3QgZWwgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdbZGF0YS1pbWF0aWMtYXV0b2NvbXBsZXRlLXVybF0nKTtcbiAgICBpZiAoZWwgPT09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgcmV0dXJuIGVsLmRhdGFzZXQuaW1hdGljQXV0b2NvbXBsZXRlVXJsO1xufVxuXG5mdW5jdGlvbiBhdXRvY29tcGxldGVVcmxTZXRQcm9qZWN0KCkge1xuICAgIGNvbnN0IGVsID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignW2RhdGEtaW1hdGljLWF1dG9jb21wbGV0ZS11cmwtc2V0LXByb2plY3RdJyk7XG5cbiAgICBjb25zdCB1cmwgPSAgICBuZXcgVVJMKGVsLmRhdGFzZXQuaW1hdGljQXV0b2NvbXBsZXRlVXJsU2V0UHJvamVjdCwgbG9jYXRpb24uaHJlZik7XG5cbiAgICByZXR1cm4gICAgIG5ldyBVUkwoZWwuZGF0YXNldC5pbWF0aWNBdXRvY29tcGxldGVVcmxTZXRQcm9qZWN0LCBsb2NhdGlvbi5ocmVmKTtcbiAgICAvLyByZXR1cm4gZWwuZGF0YXNldC5pbWF0aWNBdXRvY29tcGxldGVVcmxTZXRQcm9qZWN0XG5cbiAgICByZXR1cm4gZWxcbiAgICBpZiAoZWwgPT09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgcmV0dXJuIGVsLmRhdGFzZXQuaW1hdGljQXV0b2NvbXBsZXRlVXJsO1xufVxuXG5mdW5jdGlvbiBzZWFyY2hVcmwocykge1xuICAgIGNvbnN0IHVybCA9IG5ldyBVUkwoX2F1dG9jb21wbGV0ZVVybCwgbG9jYXRpb24uaHJlZik7XG4gICAgdXJsLnNlYXJjaFBhcmFtcy5hcHBlbmQoJ3NlYXJjaCcsIHMpO1xuXG4gICAgcmV0dXJuIHVybDtcbn1cblxuaWYgKF9hdXRvY29tcGxldGVVcmwgIT0gbnVsbCkge1xuICAgIGRvY3VtZW50XG4gICAgICAgIC5xdWVyeVNlbGVjdG9yQWxsKFxuICAgICAgICAgICAgJyNidWdub3RlX3RleHQsICNkZXNjcmlwdGlvbiwgI3N0ZXBzX3RvX3JlcHJvZHVjZSwgI2FkZGl0aW9uYWxfaW5mbywgI3N1bW1hcnksICNhZGRpdGlvbmFsX2luZm9ybWF0aW9uJ1xuICAgICAgICApXG4gICAgICAgIC5mb3JFYWNoKChlbCkgPT4ge1xuICAgICAgICAgICAgYXV0b2NvbXBsZXRlKGVsKTtcbiAgICAgICAgfSk7XG59XG4iLCIvKipcbiAqIEBwYXJhbSB7Q1NTU3R5bGVEZWNsYXJhdGlvbn0gY29tcHV0ZWRTdHlsZVxuICogQHBhcmFtIHtzdHJpbmd9IHRleHRcbiAqXG4gKiBAcmV0dXJucyB7e3dpZHRoOiBudW1iZXIsIGhlaWdodDogbnVtYmVyfX1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHRleHRTaXplKGNvbXB1dGVkU3R5bGUsIHRleHQpIHtcbiAgICBjb25zdCBzcGFuID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3BhbicpO1xuICAgIHNwYW4udGV4dENvbnRlbnQgPSB0ZXh0O1xuXG4gICAgY29uc3QgZGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgZGl2LmFwcGVuZENoaWxkKHNwYW4pO1xuICAgIEFycmF5LmZyb20oY29tcHV0ZWRTdHlsZSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgIGRpdi5zdHlsZS5zZXRQcm9wZXJ0eShcbiAgICAgICAgICAgIGtleSxcbiAgICAgICAgICAgIGNvbXB1dGVkU3R5bGUuZ2V0UHJvcGVydHlWYWx1ZShrZXkpLFxuICAgICAgICAgICAgY29tcHV0ZWRTdHlsZS5nZXRQcm9wZXJ0eVByaW9yaXR5KGtleSlcbiAgICAgICAgKTtcbiAgICB9KTtcbiAgICBkaXYuc3R5bGUudmlzaWJpbGl0eSA9ICdoaWRkZW4nO1xuICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoZGl2KTtcblxuICAgIGNvbnN0IGRhdGEgPSB7d2lkdGg6IHNwYW4ub2Zmc2V0V2lkdGgsIGhlaWdodDogc3Bhbi5vZmZzZXRIZWlnaHR9O1xuXG4gICAgZGl2LnJlbW92ZSgpO1xuXG4gICAgcmV0dXJuIGRhdGE7XG59XG4iXSwic291cmNlUm9vdCI6IiJ9